{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.21.1.54444",
      "templateHash": "3003088034318531553"
    }
  },
  "parameters": {
    "automationAccountName": {
      "type": "string"
    },
    "containerName": {
      "type": "string"
    },
    "customizations": {
      "type": "array",
      "defaultValue": []
    },
    "diskEncryptionSetResourceId": {
      "type": "string"
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow('yyMMddHHs')]"
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": ""
    },
    "domainJoinUserPrincipalName": {
      "type": "string",
      "defaultValue": ""
    },
    "domainName": {
      "type": "string",
      "defaultValue": ""
    },
    "enableBuildAutomation": {
      "type": "bool"
    },
    "excludeFromLatest": {
      "type": "bool"
    },
    "galleryName": {
      "type": "string"
    },
    "galleryResourceGroupName": {
      "type": "string"
    },
    "hybridUseBenefit": {
      "type": "bool"
    },
    "imageDefinitionNamePrefix": {
      "type": "string"
    },
    "imageMajorVersion": {
      "type": "int"
    },
    "imageMinorVersion": {
      "type": "int"
    },
    "installAccess": {
      "type": "bool"
    },
    "installExcel": {
      "type": "bool"
    },
    "installOneDriveForBusiness": {
      "type": "bool"
    },
    "installOneNote": {
      "type": "bool"
    },
    "installOutlook": {
      "type": "bool"
    },
    "installPowerPoint": {
      "type": "bool"
    },
    "installProject": {
      "type": "bool"
    },
    "installPublisher": {
      "type": "bool"
    },
    "installSkypeForBusiness": {
      "type": "bool"
    },
    "installTeams": {
      "type": "bool"
    },
    "installVirtualDesktopOptimizationTool": {
      "type": "bool"
    },
    "installVisio": {
      "type": "bool"
    },
    "installWord": {
      "type": "bool"
    },
    "keyVaultName": {
      "type": "string"
    },
    "localAdministratorPassword": {
      "type": "securestring"
    },
    "localAdministratorUsername": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]"
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "marketplaceImageOffer": {
      "type": "string",
      "defaultValue": ""
    },
    "marketplaceImagePublisher": {
      "type": "string",
      "defaultValue": ""
    },
    "marketplaceImageSKU": {
      "type": "string",
      "defaultValue": ""
    },
    "msrdcwebrtcsvcInstaller": {
      "type": "string"
    },
    "officeInstaller": {
      "type": "string"
    },
    "oUPath": {
      "type": "string"
    },
    "replicaCount": {
      "type": "int"
    },
    "resourceGroupName": {
      "type": "string"
    },
    "securityPrincipalObjectIds": {
      "type": "array"
    },
    "sourceImageType": {
      "type": "string",
      "allowedValues": [
        "AzureComputeGallery",
        "AzureMarketplace"
      ]
    },
    "storageAccountName": {
      "type": "string"
    },
    "storageAccountResourceGroupName": {
      "type": "string"
    },
    "subnetName": {
      "type": "string"
    },
    "tags": {
      "type": "object"
    },
    "teamsInstaller": {
      "type": "string"
    },
    "tenantType": {
      "type": "string",
      "allowedValues": [
        "Commercial",
        "DepartmentOfDefense",
        "GovernmentCommunityCloud",
        "GovernmentCommunityCloudHigh"
      ]
    },
    "userAssignedIdentityName": {
      "type": "string"
    },
    "userAssignedIdentityResourceGroupName": {
      "type": "string"
    },
    "vcRedistInstaller": {
      "type": "string"
    },
    "vDOTInstaller": {
      "type": "string"
    },
    "virtualMachineSize": {
      "type": "string"
    },
    "virtualNetworkName": {
      "type": "string"
    },
    "virtualNetworkResourceGroupName": {
      "type": "string"
    }
  },
  "variables": {
    "hybridWorkerVirtualMachineName": "[take(format('vmhw-{0}', uniqueString(parameters('deploymentNameSuffix'))), 15)]",
    "imageDefinitionName": "[format('{0}-{1}', parameters('imageDefinitionNamePrefix'), parameters('marketplaceImageSKU'))]",
    "imageVirtualMachineName": "[take(format('vmimg-{0}', uniqueString(parameters('deploymentNameSuffix'))), 15)]",
    "managementVirtualMachineName": "[take(format('vmmgt-{0}', uniqueString(parameters('deploymentNameSuffix'))), 15)]",
    "subscriptionId": "[subscription().subscriptionId]",
    "timeZones": {
      "australiacentral": "AUS Eastern Standard Time",
      "australiacentral2": "AUS Eastern Standard Time",
      "australiaeast": "AUS Eastern Standard Time",
      "australiasoutheast": "AUS Eastern Standard Time",
      "brazilsouth": "E. South America Standard Time",
      "brazilsoutheast": "E. South America Standard Time",
      "canadacentral": "Eastern Standard Time",
      "canadaeast": "Eastern Standard Time",
      "centralindia": "India Standard Time",
      "centralus": "Central Standard Time",
      "chinaeast": "China Standard Time",
      "chinaeast2": "China Standard Time",
      "chinanorth": "China Standard Time",
      "chinanorth2": "China Standard Time",
      "eastasia": "China Standard Time",
      "eastus": "Eastern Standard Time",
      "eastus2": "Eastern Standard Time",
      "francecentral": "Central Europe Standard Time",
      "francesouth": "Central Europe Standard Time",
      "germanynorth": "Central Europe Standard Time",
      "germanywestcentral": "Central Europe Standard Time",
      "japaneast": "Tokyo Standard Time",
      "japanwest": "Tokyo Standard Time",
      "jioindiacentral": "India Standard Time",
      "jioindiawest": "India Standard Time",
      "koreacentral": "Korea Standard Time",
      "koreasouth": "Korea Standard Time",
      "northcentralus": "Central Standard Time",
      "northeurope": "GMT Standard Time",
      "norwayeast": "Central Europe Standard Time",
      "norwaywest": "Central Europe Standard Time",
      "southafricanorth": "South Africa Standard Time",
      "southafricawest": "South Africa Standard Time",
      "southcentralus": "Central Standard Time",
      "southeastasia": "Singapore Standard Time",
      "southindia": "India Standard Time",
      "swedencentral": "Central Europe Standard Time",
      "switzerlandnorth": "Central Europe Standard Time",
      "switzerlandwest": "Central Europe Standard Time",
      "uaecentral": "Arabian Standard Time",
      "uaenorth": "Arabian Standard Time",
      "uksouth": "GMT Standard Time",
      "ukwest": "GMT Standard Time",
      "usdodcentral": "Central Standard Time",
      "usdodeast": "Eastern Standard Time",
      "usgovarizona": "Mountain Standard Time",
      "usgovtexas": "Central Standard Time",
      "usgovvirginia": "Eastern Standard Time",
      "westcentralus": "Mountain Standard Time",
      "westeurope": "Central Europe Standard Time",
      "westindia": "India Standard Time",
      "westus": "Pacific Standard Time",
      "westus2": "Pacific Standard Time",
      "westus3": "Mountain Standard Time"
    }
  },
  "resources": [
    {
      "condition": "[parameters('enableBuildAutomation')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('build-automation-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "automationAccountName": {
            "value": "[parameters('automationAccountName')]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[parameters('diskEncryptionSetResourceId')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "galleryName": {
            "value": "[parameters('galleryName')]"
          },
          "galleryResourceGroupName": {
            "value": "[parameters('galleryResourceGroupName')]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "hybridWorkerVirtualMachineName": {
            "value": "[variables('hybridWorkerVirtualMachineName')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "imageMajorVersion": {
            "value": "[parameters('imageMajorVersion')]"
          },
          "imageMinorVersion": {
            "value": "[parameters('imageMinorVersion')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDriveForBusiness": {
            "value": "[parameters('installOneDriveForBusiness')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installPublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "marketplaceImageSKU": {
            "value": "[parameters('marketplaceImageSKU')]"
          },
          "msrdcwebrtcsvcInstaller": {
            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
          },
          "officeInstaller": {
            "value": "[parameters('officeInstaller')]"
          },
          "oUPath": {
            "value": "[parameters('oUPath')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "resourceGroupName": {
            "value": "[parameters('resourceGroupName')]"
          },
          "securityPrincipalObjectIds": {
            "value": "[parameters('securityPrincipalObjectIds')]"
          },
          "sourceImageType": {
            "value": "[parameters('sourceImageType')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "storageAccountResourceGroupName": {
            "value": "[parameters('storageAccountResourceGroupName')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "teamsInstaller": {
            "value": "[parameters('teamsInstaller')]"
          },
          "tenantType": {
            "value": "[parameters('tenantType')]"
          },
          "timeZone": {
            "value": "[variables('timeZones')[parameters('location')]]"
          },
          "userAssignedIdentityName": {
            "value": "[parameters('userAssignedIdentityName')]"
          },
          "userAssignedIdentityResourceGroupName": {
            "value": "[parameters('userAssignedIdentityResourceGroupName')]"
          },
          "vcRedistInstaller": {
            "value": "[parameters('vcRedistInstaller')]"
          },
          "vDOTInstaller": {
            "value": "[parameters('vDOTInstaller')]"
          },
          "virtualMachineName": {
            "value": "[variables('hybridWorkerVirtualMachineName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkResourceGroupName": {
            "value": "[parameters('virtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "6052422639974633391"
            }
          },
          "parameters": {
            "automationAccountName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "customizations": {
              "type": "array"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "galleryName": {
              "type": "string"
            },
            "galleryResourceGroupName": {
              "type": "string"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "hybridWorkerVirtualMachineName": {
              "type": "string"
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "imageMajorVersion": {
              "type": "int"
            },
            "imageMinorVersion": {
              "type": "int"
            },
            "installAccess": {
              "type": "bool"
            },
            "installExcel": {
              "type": "bool"
            },
            "installOneDriveForBusiness": {
              "type": "bool"
            },
            "installOneNote": {
              "type": "bool"
            },
            "installOutlook": {
              "type": "bool"
            },
            "installPowerPoint": {
              "type": "bool"
            },
            "installProject": {
              "type": "bool"
            },
            "installPublisher": {
              "type": "bool"
            },
            "installSkypeForBusiness": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "installVisio": {
              "type": "bool"
            },
            "installWord": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string"
            },
            "marketplaceImagePublisher": {
              "type": "string"
            },
            "marketplaceImageSKU": {
              "type": "string"
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string"
            },
            "officeInstaller": {
              "type": "string"
            },
            "oUPath": {
              "type": "string"
            },
            "replicaCount": {
              "type": "int"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "sourceImageType": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountResourceGroupName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "teamsInstaller": {
              "type": "string"
            },
            "tenantType": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "userAssignedIdentityResourceGroupName": {
              "type": "string"
            },
            "vcRedistInstaller": {
              "type": "string"
            },
            "vDOTInstaller": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "virtualNetworkResourceGroupName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, 'KeyVaultDeployAction')]",
              "properties": {
                "roleName": "[format('KeyVaultDeployAction_{0}', subscription().subscriptionId)]",
                "description": "Allows a principal to get but not view Key Vault secrets for ARM template deployments.",
                "assignableScopes": [
                  "[subscription().id]"
                ],
                "permissions": [
                  {
                    "actions": [
                      "Microsoft.KeyVault/vaults/deploy/action"
                    ]
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('key-vault-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "roleDefinitionResourceId": {
                    "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "1312849037467694271"
                    }
                  },
                  "parameters": {
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "roleDefinitionResourceId": {
                      "type": "string"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "Secrets": [
                      {
                        "name": "DomainJoinPassword",
                        "value": "[parameters('domainJoinPassword')]"
                      },
                      {
                        "name": "DomainJoinUserPrincipalName",
                        "value": "[parameters('domainJoinUserPrincipalName')]"
                      },
                      {
                        "name": "LocalAdministratorPassword",
                        "value": "[parameters('localAdministratorPassword')]"
                      },
                      {
                        "name": "LocalAdministratorUsername",
                        "value": "[parameters('localAdministratorUsername')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": false,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": false,
                        "publicNetworkAccess": "Enabled"
                      }
                    },
                    {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(variables('Secrets'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
                      "properties": {
                        "value": "[variables('Secrets')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
                      },
                      "condition": "[not(empty(parameters('securityPrincipalObjectIds')))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]], parameters('roleDefinitionResourceId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionResourceId')]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('template-spec-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "12469890564132896983"
                    }
                  },
                  "parameters": {
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.21.1.54444",
                          "templateHash": "14182240961712742628"
                        }
                      },
                      "parameters": {
                        "containerName": {
                          "type": "string"
                        },
                        "customizations": {
                          "type": "array"
                        },
                        "diskEncryptionSetResourceId": {
                          "type": "string"
                        },
                        "deploymentNameSuffix": {
                          "type": "string"
                        },
                        "enableBuildAutomation": {
                          "type": "bool"
                        },
                        "excludeFromLatest": {
                          "type": "bool"
                        },
                        "galleryName": {
                          "type": "string"
                        },
                        "galleryResourceGroupName": {
                          "type": "string"
                        },
                        "hybridUseBenefit": {
                          "type": "bool"
                        },
                        "imageDefinitionName": {
                          "type": "string"
                        },
                        "imageMajorVersion": {
                          "type": "int"
                        },
                        "imageMinorVersion": {
                          "type": "int"
                        },
                        "imageName": {
                          "type": "string"
                        },
                        "imageVirtualMachineName": {
                          "type": "string"
                        },
                        "installAccess": {
                          "type": "bool"
                        },
                        "installExcel": {
                          "type": "bool"
                        },
                        "installOneDriveForBusiness": {
                          "type": "bool"
                        },
                        "installOneNote": {
                          "type": "bool"
                        },
                        "installOutlook": {
                          "type": "bool"
                        },
                        "installPowerPoint": {
                          "type": "bool"
                        },
                        "installProject": {
                          "type": "bool"
                        },
                        "installPublisher": {
                          "type": "bool"
                        },
                        "installSkypeForBusiness": {
                          "type": "bool"
                        },
                        "installTeams": {
                          "type": "bool"
                        },
                        "installVirtualDesktopOptimizationTool": {
                          "type": "bool"
                        },
                        "installVisio": {
                          "type": "bool"
                        },
                        "installWord": {
                          "type": "bool"
                        },
                        "keyVaultName": {
                          "type": "string"
                        },
                        "localAdministratorPassword": {
                          "type": "securestring"
                        },
                        "localAdministratorUsername": {
                          "type": "securestring"
                        },
                        "location": {
                          "type": "string"
                        },
                        "managementVirtualMachineName": {
                          "type": "string"
                        },
                        "marketplaceImageOffer": {
                          "type": "string"
                        },
                        "marketplaceImagePublisher": {
                          "type": "string"
                        },
                        "marketplaceImageSKU": {
                          "type": "string"
                        },
                        "msrdcwebrtcsvcInstaller": {
                          "type": "string"
                        },
                        "officeInstaller": {
                          "type": "string"
                        },
                        "replicaCount": {
                          "type": "int"
                        },
                        "resourceGroupName": {
                          "type": "string"
                        },
                        "sourceImageType": {
                          "type": "string"
                        },
                        "storageAccountName": {
                          "type": "string"
                        },
                        "storageAccountResourceGroupName": {
                          "type": "string"
                        },
                        "subnetName": {
                          "type": "string"
                        },
                        "subscriptionId": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "object"
                        },
                        "teamsInstaller": {
                          "type": "string"
                        },
                        "tenantType": {
                          "type": "string"
                        },
                        "userAssignedIdentityName": {
                          "type": "string"
                        },
                        "userAssignedIdentityResourceGroupName": {
                          "type": "string"
                        },
                        "vcRedistInstaller": {
                          "type": "string"
                        },
                        "vDOTInstaller": {
                          "type": "string"
                        },
                        "virtualNetworkName": {
                          "type": "string"
                        },
                        "virtualNetworkResourceGroupName": {
                          "type": "string"
                        },
                        "virtualMachineSize": {
                          "type": "string"
                        }
                      },
                      "variables": {
                        "autoImageVersion": "[[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imageMinorVersion'))]",
                        "cloud": "[[environment().name]",
                        "imageSuffix": "[[take(parameters('deploymentNameSuffix'), 9)]"
                      },
                      "resources": [
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "diskEncryptionSetResourceId": {
                                "value": "[[parameters('diskEncryptionSetResourceId')]"
                              },
                              "localAdministratorPassword": "[[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                              "localAdministratorUsername": "[[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "marketplaceImageOffer": {
                                "value": "[[parameters('marketplaceImageOffer')]"
                              },
                              "marketplaceImagePublisher": {
                                "value": "[[parameters('marketplaceImagePublisher')]"
                              },
                              "marketplaceImageSKU": {
                                "value": "[[parameters('marketplaceImageSKU')]"
                              },
                              "subnetName": {
                                "value": "[[parameters('subnetName')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityName": {
                                "value": "[[parameters('userAssignedIdentityName')]"
                              },
                              "userAssignedIdentityResourceGroupName": {
                                "value": "[[parameters('userAssignedIdentityResourceGroupName')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('imageVirtualMachineName')]"
                              },
                              "virtualMachineSize": {
                                "value": "[[parameters('virtualMachineSize')]"
                              },
                              "virtualNetworkName": {
                                "value": "[[parameters('virtualNetworkName')]"
                              },
                              "virtualNetworkResourceGroupName": {
                                "value": "[[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/')[4]]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "3868434678079461490"
                                }
                              },
                              "parameters": {
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring"
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "marketplaceImageSKU": {
                                  "type": "string"
                                },
                                "subnetName": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityName": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceGroupName": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                },
                                "virtualMachineSize": {
                                  "type": "string"
                                },
                                "virtualNetworkName": {
                                  "type": "string"
                                },
                                "virtualNetworkResourceGroupName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Network/networkSecurityGroups",
                                  "apiVersion": "2022-05-01",
                                  "name": "nsg-image-vm",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "securityRules": [
                                      {
                                        "name": "default-allow-3389",
                                        "properties": {
                                          "priority": 1000,
                                          "access": "Allow",
                                          "direction": "Inbound",
                                          "destinationPortRange": "3389",
                                          "protocol": "Tcp",
                                          "sourcePortRange": "*",
                                          "sourceAddressPrefix": "*",
                                          "destinationAddressPrefix": "*"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2022-05-01",
                                  "name": "[[take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15)]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "ipConfigurations": [
                                      {
                                        "name": "ipconfig1",
                                        "properties": {
                                          "privateIPAllocationMethod": "Dynamic",
                                          "subnet": {
                                            "id": "[[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines",
                                  "apiVersion": "2022-03-01",
                                  "name": "[[parameters('virtualMachineName')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "identity": {
                                    "type": "UserAssigned",
                                    "userAssignedIdentities": {
                                      "[[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                                    }
                                  },
                                  "properties": {
                                    "hardwareProfile": {
                                      "vmSize": "[[parameters('virtualMachineSize')]"
                                    },
                                    "osProfile": {
                                      "computerName": "[[parameters('virtualMachineName')]",
                                      "adminUsername": "[[parameters('localAdministratorUsername')]",
                                      "adminPassword": "[[parameters('localAdministratorPassword')]"
                                    },
                                    "storageProfile": {
                                      "imageReference": {
                                        "publisher": "[[parameters('marketplaceImagePublisher')]",
                                        "offer": "[[parameters('marketplaceImageOffer')]",
                                        "sku": "[[parameters('marketplaceImageSKU')]",
                                        "version": "latest"
                                      },
                                      "osDisk": {
                                        "createOption": "FromImage",
                                        "deleteOption": "Delete",
                                        "managedDisk": {
                                          "diskEncryptionSet": {
                                            "id": "[[parameters('diskEncryptionSetResourceId')]"
                                          },
                                          "storageAccountType": "StandardSSD_LRS"
                                        }
                                      }
                                    },
                                    "networkProfile": {
                                      "networkInterfaces": [
                                        {
                                          "id": "[[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]",
                                          "properties": {
                                            "deleteOption": "Delete"
                                          }
                                        }
                                      ]
                                    },
                                    "diagnosticsProfile": {
                                      "bootDiagnostics": {
                                        "enabled": false
                                      }
                                    },
                                    "securityProfile": {
                                      "encryptionAtHost": true,
                                      "uefiSettings": {
                                        "secureBootEnabled": true,
                                        "vTpmEnabled": true
                                      },
                                      "securityType": "TrustedLaunch"
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "Name": {
                                  "type": "string",
                                  "value": "[[parameters('virtualMachineName')]"
                                },
                                "ResourceId": {
                                  "type": "string",
                                  "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                },
                                "ResourceGroupName": {
                                  "type": "string",
                                  "value": "[[split(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '/')[4]]"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('custom-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "customizations": {
                                "value": "[[parameters('customizations')]"
                              },
                              "installAccess": {
                                "value": "[[parameters('installAccess')]"
                              },
                              "installExcel": {
                                "value": "[[parameters('installExcel')]"
                              },
                              "installOneDriveForBusiness": {
                                "value": "[[parameters('installOneDriveForBusiness')]"
                              },
                              "installOneNote": {
                                "value": "[[parameters('installOneNote')]"
                              },
                              "installOutlook": {
                                "value": "[[parameters('installOutlook')]"
                              },
                              "installPowerPoint": {
                                "value": "[[parameters('installPowerPoint')]"
                              },
                              "installProject": {
                                "value": "[[parameters('installProject')]"
                              },
                              "installPublisher": {
                                "value": "[[parameters('installPublisher')]"
                              },
                              "installSkypeForBusiness": {
                                "value": "[[parameters('installSkypeForBusiness')]"
                              },
                              "installTeams": {
                                "value": "[[parameters('installTeams')]"
                              },
                              "installVirtualDesktopOptimizationTool": {
                                "value": "[[parameters('installVirtualDesktopOptimizationTool')]"
                              },
                              "installVisio": {
                                "value": "[[parameters('installVisio')]"
                              },
                              "installWord": {
                                "value": "[[parameters('installWord')]"
                              },
                              "storageAccountName": {
                                "value": "[[parameters('storageAccountName')]"
                              },
                              "storageEndpoint": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "tenantType": {
                                "value": "[[parameters('tenantType')]"
                              },
                              "userAssignedIdentityObjectId": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
                              },
                              "vmName": {
                                "value": "[[parameters('imageVirtualMachineName')]"
                              },
                              "vDotInstaller": {
                                "value": "[[parameters('vDOTInstaller')]"
                              },
                              "officeInstaller": {
                                "value": "[[parameters('officeInstaller')]"
                              },
                              "msrdcwebrtcsvcInstaller": {
                                "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                              },
                              "teamsInstaller": {
                                "value": "[[parameters('teamsInstaller')]"
                              },
                              "vcRedistInstaller": {
                                "value": "[[parameters('vcRedistInstaller')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "7965137127816765885"
                                }
                              },
                              "parameters": {
                                "containerName": {
                                  "type": "string"
                                },
                                "customizations": {
                                  "type": "array"
                                },
                                "installAccess": {
                                  "type": "bool"
                                },
                                "installExcel": {
                                  "type": "bool"
                                },
                                "installOneDriveForBusiness": {
                                  "type": "bool"
                                },
                                "installOneNote": {
                                  "type": "bool"
                                },
                                "installOutlook": {
                                  "type": "bool"
                                },
                                "installPowerPoint": {
                                  "type": "bool"
                                },
                                "installProject": {
                                  "type": "bool"
                                },
                                "installPublisher": {
                                  "type": "bool"
                                },
                                "installSkypeForBusiness": {
                                  "type": "bool"
                                },
                                "installTeams": {
                                  "type": "bool"
                                },
                                "installVirtualDesktopOptimizationTool": {
                                  "type": "bool"
                                },
                                "installVisio": {
                                  "type": "bool"
                                },
                                "installWord": {
                                  "type": "bool"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "msrdcwebrtcsvcInstaller": {
                                  "type": "string"
                                },
                                "officeInstaller": {
                                  "type": "string"
                                },
                                "storageAccountName": {
                                  "type": "string"
                                },
                                "storageEndpoint": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "teamsInstaller": {
                                  "type": "string"
                                },
                                "tenantType": {
                                  "type": "string"
                                },
                                "userAssignedIdentityObjectId": {
                                  "type": "string"
                                },
                                "vcRedistInstaller": {
                                  "type": "string"
                                },
                                "vDotInstaller": {
                                  "type": "string"
                                },
                                "vmName": {
                                  "type": "string"
                                }
                              },
                              "variables": {
                                "installAccessVar": "[[format('{0}installAccess', parameters('installAccess'))]",
                                "installers": "[[parameters('customizations')]",
                                "installExcelVar": "[[format('{0}installWord', parameters('installExcel'))]",
                                "installOneDriveForBusinessVar": "[[format('{0}installOneDrive', parameters('installOneDriveForBusiness'))]",
                                "installOneNoteVar": "[[format('{0}installOneNote', parameters('installOneNote'))]",
                                "installOutlookVar": "[[format('{0}installOutlook', parameters('installOutlook'))]",
                                "installPowerPointVar": "[[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                                "installProjectVar": "[[format('{0}installProject', parameters('installProject'))]",
                                "installPublisherVar": "[[format('{0}installPublisher', parameters('installPublisher'))]",
                                "installSkypeForBusinessVar": "[[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                                "installVisioVar": "[[format('{0}installVisio', parameters('installVisio'))]",
                                "installWordVar": "[[format('{0}installWord', parameters('installWord'))]"
                              },
                              "resources": [
                                {
                                  "[string('copy')]": {
                                    "name": "applications",
                                    "count": "[[length(variables('installers'))]",
                                    "mode": "serial",
                                    "batchSize": 1
                                  },
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('vmName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "Blobname",
                                        "value": "[[variables('installers')[copyIndex()].blobName]"
                                      },
                                      {
                                        "name": "Installer",
                                        "value": "[[variables('installers')[copyIndex()].name]"
                                      },
                                      {
                                        "name": "Arguments",
                                        "value": "[[variables('installers')[copyIndex()].arguments]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$Installer,\r\n        [string]$Arguments\r\n        )\r\n        $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n        $StorageAccountName = $StorageAccountName\r\n        $ContainerName = $ContainerName\r\n        $BlobName = $BlobName\r\n        $StorageAccountUrl = $StorageEndpoint\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $env:windir\\temp\\$Installer\\Files\\$Blobname\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse \r\n        }\r\n      "
                                    }
                                  }
                                },
                                {
                                  "condition": "[[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDriveForBusiness')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2022-11-01",
                                  "name": "[[format('{0}/{1}', parameters('vmName'), 'office')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "parameters": [
                                      {
                                        "name": "InstallAccess",
                                        "value": "[[variables('installAccessVar')]"
                                      },
                                      {
                                        "name": "InstallWord",
                                        "value": "[[variables('installWordVar')]"
                                      },
                                      {
                                        "name": "InstallExcel",
                                        "value": "[[variables('installExcelVar')]"
                                      },
                                      {
                                        "name": "InstallOneDriveForBusiness",
                                        "value": "[[variables('installOneDriveForBusinessVar')]"
                                      },
                                      {
                                        "name": "InstallOneNote",
                                        "value": "[[variables('installOneNoteVar')]"
                                      },
                                      {
                                        "name": "InstallOutlook",
                                        "value": "[[variables('installOutlookVar')]"
                                      },
                                      {
                                        "name": "InstallPowerPoint",
                                        "value": "[[variables('installPowerPointVar')]"
                                      },
                                      {
                                        "name": "InstallProject",
                                        "value": "[[variables('installProjectVar')]"
                                      },
                                      {
                                        "name": "InstallPublisher",
                                        "value": "[[variables('installPublisherVar')]"
                                      },
                                      {
                                        "name": "InstallSkypeForBusiness",
                                        "value": "[[variables('installSkypeForBusinessVar')]"
                                      },
                                      {
                                        "name": "InstallVisio",
                                        "value": "[[variables('installVisioVar')]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('officeInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n      [string]$InstallAccess,\r\n      [string]$InstallExcel,\r\n      [string]$InstallOneDriveForBusiness,\r\n      [string]$InstallOutlook,\r\n      [string]$InstallProject,\r\n      [string]$InstallPublisher,\r\n      [string]$InstallSkypeForBusiness,\r\n      [string]$InstallVisio,\r\n      [string]$InstallWord,\r\n      [string]$InstallOneNote,\r\n      [string]$InstallPowerPoint,\r\n      [string]$UserAssignedIdentityObjectId,\r\n      [string]$StorageAccountName,\r\n      [string]$ContainerName,\r\n      [string]$StorageEndpoint,\r\n      [string]$BlobName\r\n      )\r\n      $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n      $StorageAccountName = $StorageAccountName\r\n      $ContainerName = $ContainerName\r\n      $BlobName = $BlobName\r\n      $StorageAccountUrl = $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          $excludeAccess = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          $excludeExcel = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDriveForBusiness -notlike '*true*'){\r\n          $excludeOneDriveForBusiness = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Groove\" />'\r\n      }\r\n      if($InstallOneDriveForBusiness -notlike '*true*'){\r\n        $excludeOneDriveForBusiness = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Groove\" />'\r\n    }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          $excludeOneNote = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          $excludeOutlook = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          $excludePowerPoint = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          $excludePublisher = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          $excludeSkypeForBusiness= Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          $excludeSkypeForBusiness= Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      $o365Settings = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          $o365SharedActivation = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      $o365Configfooter = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Configuration>'\r\n      $ErrorActionPreference = \"Stop\"\r\n      $Installer = \"$env:windir\\temp\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installVirtualDesktopOptimizationTool')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2022-11-01",
                                  "name": "[[format('{0}/{1}', parameters('vmName'), 'vdot')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('vDotInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n        )\r\n        $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n        $StorageAccountName = $StorageAccountName\r\n        $ContainerName = $ContainerName\r\n        $BlobName = $BlobName\r\n        $StorageAccountUrl = $StorageEndpoint\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        $ErrorActionPreference = \"Stop\"\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n        Write-Host \"Optimized the operating system using the Virtual Desktop Optimization Tool\"\r\n      "
                                    },
                                    "timeoutInSeconds": 640
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('vmName'), 'office')]",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('vmName'), 'teams')]"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installTeams')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2022-11-01",
                                  "name": "[[format('{0}/{1}', parameters('vmName'), 'teams')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "parameters": [
                                      {
                                        "name": "TenantType",
                                        "value": "[[parameters('tenantType')]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('teamsInstaller')]"
                                      },
                                      {
                                        "name": "BlobName2",
                                        "value": "[[parameters('vcRedistInstaller')]"
                                      },
                                      {
                                        "name": "BlobName3",
                                        "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$TenantType,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n        )\r\n      If($TenantType -eq \"Commercial\")\r\n      {\r\n        $TeamsUrl = \"https://teams.microsoft.com/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true\"\r\n      }\r\n      If($TenantType -eq \"DepartmentOfDefense\")\r\n      {\r\n        $TeamsUrl = \"https://dod.teams.microsoft.us/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true\"\r\n      }\r\n      If($TenantType -eq \"GovernmentCommunityCloud\")\r\n      {\r\n        $TeamsUrl = \"https://teams.microsoft.com/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&ring=general_gcc&download=true\"\r\n      }\r\n      If($TenantType -eq \"GovernmentCommunityCloudHigh\")\r\n      {\r\n        $TeamsUrl = \"https://gov.teams.microsoft.us/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true\"\r\n      }\r\n      Write-Host $($TeamsUrl)\r\n      $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n      $StorageAccountName = $StorageAccountName\r\n      $ContainerName = $ContainerName\r\n      $BlobName = $BlobName\r\n      $StorageAccountUrl = $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('vmName'), 'office')]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "tenantType": {
                                  "type": "string",
                                  "value": "[[parameters('tenantType')]"
                                }
                              }
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "diskEncryptionSetResourceId": {
                                "value": "[[parameters('diskEncryptionSetResourceId')]"
                              },
                              "hybridUseBenefit": {
                                "value": "[[parameters('hybridUseBenefit')]"
                              },
                              "localAdministratorPassword": "[[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                              "localAdministratorUsername": "[[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "storageEndpoint": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob]"
                              },
                              "subnetName": {
                                "value": "[[parameters('subnetName')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityName": {
                                "value": "[[parameters('userAssignedIdentityName')]"
                              },
                              "userAssignedIdentityResourceGroupName": {
                                "value": "[[parameters('userAssignedIdentityResourceGroupName')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('managementVirtualMachineName')]"
                              },
                              "virtualMachineSize": {
                                "value": "[[parameters('virtualMachineSize')]"
                              },
                              "virtualNetworkName": {
                                "value": "[[parameters('virtualNetworkName')]"
                              },
                              "virtualNetworkResourceGroup": {
                                "value": "[[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/')[4]]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "2175869603072156146"
                                }
                              },
                              "parameters": {
                                "containerName": {
                                  "type": "string"
                                },
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "hybridUseBenefit": {
                                  "type": "bool"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring"
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "userAssignedIdentityName": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceGroupName": {
                                  "type": "string"
                                },
                                "storageEndpoint": {
                                  "type": "string"
                                },
                                "subnetName": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "virtualNetworkName": {
                                  "type": "string"
                                },
                                "virtualNetworkResourceGroup": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                },
                                "virtualMachineSize": {
                                  "type": "string"
                                }
                              },
                              "variables": {
                                "installers": [
                                  {
                                    "name": "AzModules",
                                    "blobName": "Az-Cmdlets-10.2.0.37547-x64.msi",
                                    "arguments": "/i Az-Cmdlets-10.2.0.37547-x64.msi /qn /norestart",
                                    "enabled": true
                                  }
                                ]
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Network/networkSecurityGroups",
                                  "apiVersion": "2022-05-01",
                                  "name": "nsg-image-vm",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "securityRules": [
                                      {
                                        "name": "default-allow-3389",
                                        "properties": {
                                          "priority": 1000,
                                          "access": "Allow",
                                          "direction": "Inbound",
                                          "destinationPortRange": "3389",
                                          "protocol": "Tcp",
                                          "sourcePortRange": "*",
                                          "sourceAddressPrefix": "*",
                                          "destinationAddressPrefix": "*"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2022-05-01",
                                  "name": "[[take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15)]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "ipConfigurations": [
                                      {
                                        "name": "ipconfig1",
                                        "properties": {
                                          "privateIPAllocationMethod": "Dynamic",
                                          "subnet": {
                                            "id": "[[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroup')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines",
                                  "apiVersion": "2022-03-01",
                                  "name": "[[parameters('virtualMachineName')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "identity": {
                                    "type": "UserAssigned",
                                    "userAssignedIdentities": {
                                      "[[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                                    }
                                  },
                                  "properties": {
                                    "hardwareProfile": {
                                      "vmSize": "[[parameters('virtualMachineSize')]"
                                    },
                                    "osProfile": {
                                      "computerName": "[[parameters('virtualMachineName')]",
                                      "adminUsername": "[[parameters('localAdministratorUsername')]",
                                      "adminPassword": "[[parameters('localAdministratorPassword')]"
                                    },
                                    "storageProfile": {
                                      "imageReference": {
                                        "publisher": "MicrosoftWindowsServer",
                                        "offer": "WindowsServer",
                                        "sku": "2019-datacenter-core-g2",
                                        "version": "latest"
                                      },
                                      "osDisk": {
                                        "createOption": "FromImage",
                                        "deleteOption": "Delete",
                                        "managedDisk": {
                                          "diskEncryptionSet": {
                                            "id": "[[parameters('diskEncryptionSetResourceId')]"
                                          },
                                          "storageAccountType": "Premium_LRS"
                                        }
                                      },
                                      "dataDisks": []
                                    },
                                    "networkProfile": {
                                      "networkInterfaces": [
                                        {
                                          "id": "[[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]",
                                          "properties": {
                                            "deleteOption": "Delete"
                                          }
                                        }
                                      ]
                                    },
                                    "diagnosticsProfile": {
                                      "bootDiagnostics": {
                                        "enabled": false
                                      }
                                    },
                                    "securityProfile": {
                                      "encryptionAtHost": true,
                                      "uefiSettings": {
                                        "secureBootEnabled": true,
                                        "vTpmEnabled": true
                                      },
                                      "securityType": "TrustedLaunch"
                                    },
                                    "licenseType": "[[if(parameters('hybridUseBenefit'), 'Window_Server', null())]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]"
                                  ]
                                },
                                {
                                  "[string('copy')]": {
                                    "name": "modules",
                                    "count": "[[length(variables('installers'))]"
                                  },
                                  "condition": "[[variables('installers')[copyIndex()].enabled]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2022-11-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), format('app{0}', variables('installers')[copyIndex()].name))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[variables('installers')[copyIndex()].blobName]"
                                      },
                                      {
                                        "name": "Arguments",
                                        "value": "[[variables('installers')[copyIndex()].arguments]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$Arguments\r\n        )\r\n        $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n        $ContainerName = $ContainerName\r\n        $BlobName = $BlobName\r\n        $StorageAccountUrl = $StorageEndpoint\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$Blobname\"\r\n        Start-Sleep -Seconds 60\r\n        Set-Location -Path $env:windir\\temp\r\n\r\n        # Install PowerSHell Modules\r\n        Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n        Get-InstalledModule | Where-Object {$_.name -like \"Az\"}\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                  ]
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('restart-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "cloud": {
                                "value": "[[variables('cloud')]"
                              },
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceGroupName.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityName": {
                                "value": "[[parameters('userAssignedIdentityName')]"
                              },
                              "userAssignedIdentityResourceGroupName": {
                                "value": "[[parameters('userAssignedIdentityResourceGroupName')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('managementVirtualMachineName')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "5562374981564876716"
                                }
                              },
                              "parameters": {
                                "cloud": {
                                  "type": "string"
                                },
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityName": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceGroupName": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'restartVm')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": false,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "miId",
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId]"
                                      },
                                      {
                                        "name": "imageVmRg",
                                        "value": "[[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Compute/virtualMachines', parameters('imageVirtualMachineName')), '/')[4]]"
                                      },
                                      {
                                        "name": "imageVmName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      },
                                      {
                                        "name": "Environment",
                                        "value": "[[parameters('cloud')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$miId,\r\n        [string]$imageVmRg,\r\n        [string]$imageVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miId -Environment $Environment # Run on the virtual machine\r\n        # Restart VM\r\n        Restart-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg\r\n\r\n        $lastProvisioningState = \"\"\r\n        $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        $condition = ($provisioningState -eq \"PowerState/running\")\r\n        while (!$condition) {\r\n          if ($lastProvisioningState -ne $provisioningState) {\r\n            write-host $imageVmName \"under\" $imageVmRg \"is\" $provisioningState \"(waiting for state change)\"\r\n          }\r\n          $lastProvisioningState = $provisioningState\r\n\r\n          Start-Sleep -Seconds 5\r\n          $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n\r\n          $condition = ($provisioningState -eq \"PowerState/running\")\r\n        }\r\n        write-host $imageVmName \"under\" $imageVmRg \"is\" $provisioningState\r\n        start-sleep 30\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "storageAccountName": {
                                "value": "[[parameters('storageAccountName')]"
                              },
                              "storageEndpoint": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityObjectId": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
                              },
                              "virtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "9213852178572442531"
                                }
                              },
                              "parameters": {
                                "containerName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "storageAccountName": {
                                  "type": "string"
                                },
                                "storageEndpoint": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityObjectId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2022-11-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'sysprep')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[parameters('tags')]",
                                  "properties": {
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "    param(\r\n      [string]$UserAssignedIdentityObjectId,\r\n      [string]$StorageAccountName,\r\n      [string]$ContainerName,\r\n      [string]$StorageEndpoint\r\n      )\r\n      $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n      $StorageAccountName = $StorageAccountName\r\n      $ContainerName = $ContainerName\r\n      $BlobName = 'New-PepareVHDToUploadToAzure.ps1'\r\n      $StorageAccountUrl = $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $env:windir\\temp\\$BlobName\r\n      Start-Sleep -Seconds 60\r\n      Set-Location -Path $env:windir\\temp\r\n      .\\New-PepareVHDToUploadToAzure.ps1\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "cloud": {
                                "value": "[[variables('cloud')]"
                              },
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceGroupName.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "userAssignedIdentityName": {
                                "value": "[[parameters('userAssignedIdentityName')]"
                              },
                              "userAssignedIdentityResourceGroupName": {
                                "value": "[[parameters('userAssignedIdentityResourceGroupName')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('managementVirtualMachineName')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "7638710455549607300"
                                }
                              },
                              "parameters": {
                                "cloud": {
                                  "type": "string"
                                },
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "userAssignedIdentityName": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceGroupName": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'generalize')]",
                                  "location": "[[parameters('location')]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": false,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "miId",
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId]"
                                      },
                                      {
                                        "name": "imageVmRg",
                                        "value": "[[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Compute/virtualMachines', parameters('imageVirtualMachineName')), '/')[4]]"
                                      },
                                      {
                                        "name": "imageVmName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      },
                                      {
                                        "name": "managementVmRg",
                                        "value": "[[split(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '/')[4]]"
                                      },
                                      {
                                        "name": "managementVmName",
                                        "value": "[[parameters('virtualMachineName')]"
                                      },
                                      {
                                        "name": "Environment",
                                        "value": "[[parameters('cloud')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$miId,\r\n        [string]$imageVmRg,\r\n        [string]$imageVmName,\r\n        [string]$managementVmRg,\r\n        [string]$managementVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miId -Environment $Environment # Run on the virtual machine\r\n\r\n        Start-Sleep 30\r\n        \r\n        # Generalize VM Using PowerShell\r\n        Set-AzVm -ResourceGroupName $imageVmRg -Name $imageVmName -Generalized\r\n\r\n        Write-Host \"Generalized\" \r\n\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('gallery-image-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('galleryResourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "excludeFromLatest": {
                                "value": "[[parameters('excludeFromLatest')]"
                              },
                              "galleryName": {
                                "value": "[[parameters('galleryName')]"
                              },
                              "imageDefinitionName": {
                                "value": "[[parameters('imageDefinitionName')]"
                              },
                              "imageName": {
                                "value": "[[parameters('imageName')]"
                              },
                              "imageVersionNumber": {
                                "value": "[[variables('autoImageVersion')]"
                              },
                              "imageVirtualMachineResourceId": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceId.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "marketplaceImageOffer": {
                                "value": "[[parameters('marketplaceImageOffer')]"
                              },
                              "marketplaceImagePublisher": {
                                "value": "[[parameters('marketplaceImagePublisher')]"
                              },
                              "marketplaceImageSKU": {
                                "value": "[[parameters('marketplaceImageSKU')]"
                              },
                              "replicaCount": {
                                "value": "[[parameters('replicaCount')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "17790546068270668756"
                                }
                              },
                              "parameters": {
                                "allowDeletionOfReplicatedLocations": {
                                  "type": "bool",
                                  "defaultValue": true
                                },
                                "excludeFromLatest": {
                                  "type": "bool"
                                },
                                "galleryName": {
                                  "type": "string"
                                },
                                "hyperVGeneration": {
                                  "type": "string",
                                  "defaultValue": "V2"
                                },
                                "imageDefinitionName": {
                                  "type": "string"
                                },
                                "imageName": {
                                  "type": "string"
                                },
                                "imageVersionNumber": {
                                  "type": "string"
                                },
                                "imageVirtualMachineResourceId": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "marketplaceImageSKU": {
                                  "type": "string"
                                },
                                "replicaCount": {
                                  "type": "int"
                                },
                                "replicationMode": {
                                  "type": "string",
                                  "defaultValue": "Full"
                                },
                                "storageAccountType": {
                                  "type": "string",
                                  "defaultValue": "Standard_LRS"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/galleries/images",
                                  "apiVersion": "2022-03-03",
                                  "name": "[[format('{0}/{1}', parameters('galleryName'), parameters('imageDefinitionName'))]",
                                  "location": "[[parameters('location')]",
                                  "properties": {
                                    "architecture": "x64",
                                    "features": [
                                      {
                                        "name": "IsHibernateSupported",
                                        "value": "True"
                                      },
                                      {
                                        "name": "IsAcceleratedNetworkSupported",
                                        "value": "True"
                                      },
                                      {
                                        "name": "SecurityType",
                                        "value": "TrustedLaunch"
                                      }
                                    ],
                                    "hyperVGeneration": "[[parameters('hyperVGeneration')]",
                                    "identifier": {
                                      "offer": "[[parameters('marketplaceImageOffer')]",
                                      "publisher": "[[parameters('marketplaceImagePublisher')]",
                                      "sku": "[[format('{0}-{1}', parameters('marketplaceImageSKU'), parameters('imageName'))]"
                                    },
                                    "osState": "Generalized",
                                    "osType": "Windows"
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/galleries/images/versions",
                                  "apiVersion": "2022-03-03",
                                  "name": "[[format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                                  "location": "[[parameters('location')]",
                                  "properties": {
                                    "publishingProfile": {
                                      "excludeFromLatest": "[[parameters('excludeFromLatest')]",
                                      "replicaCount": "[[parameters('replicaCount')]",
                                      "replicationMode": "[[parameters('replicationMode')]",
                                      "storageAccountType": "[[parameters('storageAccountType')]",
                                      "targetRegions": [
                                        {
                                          "excludeFromLatest": "[[parameters('excludeFromLatest')]",
                                          "name": "[[parameters('location')]",
                                          "regionalReplicaCount": "[[parameters('replicaCount')]",
                                          "storageAccountType": "[[parameters('storageAccountType')]"
                                        }
                                      ]
                                    },
                                    "safetyProfile": {
                                      "allowDeletionOfReplicatedLocations": "[[parameters('allowDeletionOfReplicatedLocations')]"
                                    },
                                    "storageProfile": {
                                      "source": {
                                        "id": "[[parameters('imageVirtualMachineResourceId')]"
                                      }
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('imageDefinitionName'))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "galleryName": {
                                  "type": "string",
                                  "value": "[[parameters('galleryName')]"
                                },
                                "imageDefinitionName": {
                                  "type": "string",
                                  "value": "[[parameters('imageDefinitionName')]"
                                }
                              }
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[parameters('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "cloud": {
                                "value": "[[variables('cloud')]"
                              },
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceGroupName.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "userAssignedIdentityName": {
                                "value": "[[parameters('userAssignedIdentityName')]"
                              },
                              "userAssignedIdentityResourceGroupName": {
                                "value": "[[parameters('userAssignedIdentityResourceGroupName')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('managementVirtualMachineName')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.21.1.54444",
                                  "templateHash": "9803358863145867514"
                                }
                              },
                              "parameters": {
                                "cloud": {
                                  "type": "string"
                                },
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "userAssignedIdentityName": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceGroupName": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'removeVm')]",
                                  "location": "[[parameters('location')]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": false,
                                    "asyncExecution": true,
                                    "parameters": [
                                      {
                                        "name": "miId",
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId]"
                                      },
                                      {
                                        "name": "imageVmRg",
                                        "value": "[[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Compute/virtualMachines', parameters('imageVirtualMachineName')), '/')[4]]"
                                      },
                                      {
                                        "name": "imageVmName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      },
                                      {
                                        "name": "managementVmRg",
                                        "value": "[[split(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '/')[4]]"
                                      },
                                      {
                                        "name": "managementVmName",
                                        "value": "[[parameters('virtualMachineName')]"
                                      },
                                      {
                                        "name": "Environment",
                                        "value": "[[parameters('cloud')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$miId,\r\n        [string]$imageVmRg,\r\n        [string]$imageVmName,\r\n        [string]$managementVmRg,\r\n        [string]$managementVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miId -Environment $Environment # Run on the virtual machine\r\n\r\n        # Remove Image VM and Management VM\r\n\r\n        Remove-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg -ForceDeletion $true -Force\r\n\r\n        Remove-AzVM -Name $managementVmName -ResourceGroupName $managementVmRg -NoWait -ForceDeletion $true -Force -AsJob\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('galleryResourceGroupName')), 'Microsoft.Resources/deployments', format('gallery-image-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        }
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/templateSpecs",
                      "apiVersion": "2022-02-01",
                      "name": "[format('ts-{0}', parameters('imageDefinitionName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "description": "[format('An automation runbook deploys a new image version for the \"{0}\" image definition from this template spec.', parameters('imageDefinitionName'))]",
                        "displayName": "[format('Zero Trust Image Build Automation: {0}', parameters('imageDefinitionName'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/templateSpecs/versions",
                      "apiVersion": "2022-02-01",
                      "name": "[format('{0}/{1}', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "mainTemplate": "[variables('$fxv#0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/templateSpecs', format('ts-{0}', parameters('imageDefinitionName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/templateSpecs', format('ts-{0}', parameters('imageDefinitionName')))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('automation-account-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "galleryName": {
                    "value": "[parameters('galleryName')]"
                  },
                  "galleryResourceGroupName": {
                    "value": "[parameters('galleryResourceGroupName')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "hybridWorkerVirtualMachineName": {
                    "value": "[parameters('hybridWorkerVirtualMachineName')]"
                  },
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "imageMajorVersion": {
                    "value": "[parameters('imageMajorVersion')]"
                  },
                  "imageMinorVersion": {
                    "value": "[parameters('imageMinorVersion')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDriveForBusiness": {
                    "value": "[parameters('installOneDriveForBusiness')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "oUPath": {
                    "value": "[parameters('oUPath')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageAccountResourceGroupName": {
                    "value": "[parameters('storageAccountResourceGroupName')]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "templateSpecResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "tenantType": {
                    "value": "[parameters('tenantType')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "userAssignedIdentityResourceGroupName": {
                    "value": "[parameters('userAssignedIdentityResourceGroupName')]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDOTInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "virtualNetworkResourceGroupName": {
                    "value": "[parameters('virtualNetworkResourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "17023179395352105"
                    }
                  },
                  "parameters": {
                    "automationAccountName": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "galleryName": {
                      "type": "string"
                    },
                    "galleryResourceGroupName": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "hybridWorkerVirtualMachineName": {
                      "type": "string"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageMajorVersion": {
                      "type": "int"
                    },
                    "imageMinorVersion": {
                      "type": "int"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDriveForBusiness": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "jobScheduleName": {
                      "type": "string",
                      "defaultValue": "[newGuid()]"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "oUPath": {
                      "type": "string"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "sourceImageType": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageAccountResourceGroupName": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "templateSpecResourceId": {
                      "type": "string"
                    },
                    "tenantType": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceGroupName": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDOTInstaller": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroupName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "environmentName": "[environment().name]",
                    "runbookName": "Zero-Trust-Image-Build-Automation",
                    "subnetResourceId": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
                    "subscriptionId": "[subscription().subscriptionId]",
                    "tenantId": "[subscription().tenantId]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[variables('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": true,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_D2s_v3"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            },
                            "osType": "Windows"
                          },
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true,
                            "patchSettings": {
                              "patchMode": "AutomaticByOS",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "allowExtensionOperations": true,
                          "requireGuestProvisionSignal": true
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Window_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2022-08-08",
                      "name": "[parameters('automationAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "disableLocalAuth": false,
                        "sku": {
                          "name": "Basic"
                        },
                        "encryption": {
                          "keySource": "Microsoft.Automation",
                          "identity": {}
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/runbooks",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), variables('runbookName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "runbookType": "PowerShell",
                        "logProgress": false,
                        "logVerbose": false,
                        "publishContentLink": {
                          "uri": "",
                          "version": "1.0.0.0"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/schedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('imageDefinitionName'))]",
                      "properties": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "[dateTimeAdd(parameters('time'), 'PT15M')]",
                        "timeZone": "[parameters('timeZone')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('jobScheduleName'))]",
                      "properties": {
                        "parameters": {
                          "automationAccountName": "[parameters('automationAccountName')]",
                          "containerName": "[parameters('containerName')]",
                          "customizations": "[string(parameters('customizations'))]",
                          "deploymentType": "ImageBuild",
                          "diskEncryptionSetResourceId": "[parameters('diskEncryptionSetResourceId')]",
                          "environmentName": "[variables('environmentName')]",
                          "galleryName": "[parameters('galleryName')]",
                          "galleryResourceGroup": "[parameters('galleryResourceGroupName')]",
                          "hybridUseBenefit": "[string(parameters('hybridUseBenefit'))]",
                          "hybridWorkerVirtualMachineName": "[parameters('hybridWorkerVirtualMachineName')]",
                          "imageDefinitionName": "[parameters('imageDefinitionName')]",
                          "imageMajorVersion": "[string(parameters('imageMajorVersion'))]",
                          "imageMinorVersion": "[string(parameters('imageMinorVersion'))]",
                          "installAccess": "[string(parameters('installAccess'))]",
                          "installExcel": "[string(parameters('installExcel'))]",
                          "installOneDriveForBusiness": "[string(parameters('installOneDriveForBusiness'))]",
                          "installOneNote": "[string(parameters('installOneNote'))]",
                          "installOutlook": "[string(parameters('installOutlook'))]",
                          "installPowerPoint": "[string(parameters('installPowerPoint'))]",
                          "installProject": "[string(parameters('installProject'))]",
                          "installPublisher": "[string(parameters('installPublisher'))]",
                          "installSkypeForBusiness": "[string(parameters('installSkypeForBusiness'))]",
                          "installTeams": "[string(parameters('installTeams'))]",
                          "installVirtualDesktopOptimizationTool": "[string(parameters('installVirtualDesktopOptimizationTool'))]",
                          "installVisio": "[string(parameters('installVisio'))]",
                          "installWord": "[string(parameters('installWord'))]",
                          "localAdministratorPassword": "[parameters('localAdministratorPassword')]",
                          "localAdministratorUsername": "[parameters('localAdministratorUsername')]",
                          "location": "[parameters('location')]",
                          "logAnalyticsWorkspaceResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                          "marketplaceImageOffer": "[parameters('marketplaceImageOffer')]",
                          "marketplaceImagePublisher": "[parameters('marketplaceImagePublisher')]",
                          "marketplaceImageSKU": "[parameters('marketplaceImageSKU')]",
                          "msrdcwebrtcsvcInstaller": "[parameters('msrdcwebrtcsvcInstaller')]",
                          "officeInstaller": "[parameters('officeInstaller')]",
                          "replicaCount": "[string(parameters('replicaCount'))]",
                          "resourceGroupName": "[parameters('resourceGroupName')]",
                          "sourceImageType": "[parameters('sourceImageType')]",
                          "storageAccountName": "[parameters('storageAccountName')]",
                          "storageAccountResourceGroupName": "[parameters('storageAccountResourceGroupName')]",
                          "subnetName": "[parameters('subnetName')]",
                          "subscriptionId": "[variables('subscriptionId')]",
                          "tags": "[string(parameters('tags'))]",
                          "teamsInstaller": "[parameters('teamsInstaller')]",
                          "templateSpecResourceId": "[parameters('templateSpecResourceId')]",
                          "tenantId": "[variables('tenantId')]",
                          "tenantType": "[parameters('tenantType')]",
                          "userAssignedIdentityName": "[parameters('userAssignedIdentityName')]",
                          "userAssignedIdentityResourceGroupName": "[parameters('userAssignedIdentityResourceGroupName')]",
                          "vcRedistInstaller": "[parameters('vcRedistInstaller')]",
                          "vDOTInstaller": "[parameters('vDOTInstaller')]",
                          "virtualMachineName": "[parameters('hybridWorkerVirtualMachineName')]",
                          "virtualNetworkName": "[parameters('virtualNetworkName')]",
                          "virtualNetworkResourceGroupName": "[parameters('virtualNetworkResourceGroupName')]",
                          "virtualMachineSize": "[parameters('virtualMachineSize')]"
                        },
                        "runbook": {
                          "name": "[variables('runbookName')]"
                        },
                        "runOn": "Zero Trust Image Build Automation",
                        "schedule": {
                          "name": "[parameters('imageDefinitionName')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), variables('runbookName'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), parameters('imageDefinitionName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                      "name": "[format('diag-{0}', parameters('automationAccountName'))]",
                      "properties": {
                        "logs": [
                          {
                            "category": "JobLogs",
                            "enabled": true
                          },
                          {
                            "category": "JobStreams",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                      "properties": {
                        "credential": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Zero Trust Image Build Automation', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')))]",
                      "properties": {
                        "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'HybridWorkerForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Automation.HybridWorker",
                        "type": "HybridWorkerForWindows",
                        "typeHandlerVersion": "1.1",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08').automationHybridServiceUrl]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('domainJoinUserPrincipalName'))), not(empty(parameters('oUPath'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('time')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "User": "[parameters('domainJoinUserPrincipalName')]",
                          "Restart": "true",
                          "Options": "3",
                          "OUPath": "[parameters('oUPath')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'HybridWorkerForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('image-build-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[parameters('diskEncryptionSetResourceId')]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('excludeFromLatest')]"
          },
          "galleryName": {
            "value": "[parameters('galleryName')]"
          },
          "galleryResourceGroupName": {
            "value": "[parameters('galleryResourceGroupName')]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "imageMajorVersion": {
            "value": "[parameters('imageMajorVersion')]"
          },
          "imageMinorVersion": {
            "value": "[parameters('imageMinorVersion')]"
          },
          "imageVirtualMachineName": {
            "value": "[variables('imageVirtualMachineName')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDriveForBusiness": {
            "value": "[parameters('installOneDriveForBusiness')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installPublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managementVirtualMachineName": {
            "value": "[variables('managementVirtualMachineName')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "marketplaceImageSKU": {
            "value": "[parameters('marketplaceImageSKU')]"
          },
          "msrdcwebrtcsvcInstaller": {
            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
          },
          "officeInstaller": {
            "value": "[parameters('officeInstaller')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "resourceGroupName": {
            "value": "[parameters('resourceGroupName')]"
          },
          "sourceImageType": {
            "value": "[parameters('sourceImageType')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "storageAccountResourceGroupName": {
            "value": "[parameters('storageAccountResourceGroupName')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "teamsInstaller": {
            "value": "[parameters('teamsInstaller')]"
          },
          "tenantType": {
            "value": "[parameters('tenantType')]"
          },
          "userAssignedIdentityName": {
            "value": "[parameters('userAssignedIdentityName')]"
          },
          "userAssignedIdentityResourceGroupName": {
            "value": "[parameters('userAssignedIdentityResourceGroupName')]"
          },
          "vcRedistInstaller": {
            "value": "[parameters('vcRedistInstaller')]"
          },
          "vDOTInstaller": {
            "value": "[parameters('vDOTInstaller')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkResourceGroupName": {
            "value": "[parameters('virtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "10004335665907086585"
            }
          },
          "parameters": {
            "containerName": {
              "type": "string"
            },
            "customizations": {
              "type": "array"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool"
            },
            "excludeFromLatest": {
              "type": "bool"
            },
            "galleryName": {
              "type": "string"
            },
            "galleryResourceGroupName": {
              "type": "string"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "imageMajorVersion": {
              "type": "int"
            },
            "imageMinorVersion": {
              "type": "int"
            },
            "imageVirtualMachineName": {
              "type": "string"
            },
            "installAccess": {
              "type": "bool"
            },
            "installExcel": {
              "type": "bool"
            },
            "installOneDriveForBusiness": {
              "type": "bool"
            },
            "installOneNote": {
              "type": "bool"
            },
            "installOutlook": {
              "type": "bool"
            },
            "installPowerPoint": {
              "type": "bool"
            },
            "installProject": {
              "type": "bool"
            },
            "installPublisher": {
              "type": "bool"
            },
            "installSkypeForBusiness": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "installVisio": {
              "type": "bool"
            },
            "installWord": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string"
            },
            "marketplaceImagePublisher": {
              "type": "string"
            },
            "marketplaceImageSKU": {
              "type": "string"
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string"
            },
            "officeInstaller": {
              "type": "string"
            },
            "replicaCount": {
              "type": "int"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "sourceImageType": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountResourceGroupName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "teamsInstaller": {
              "type": "string"
            },
            "tenantType": {
              "type": "string"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "userAssignedIdentityResourceGroupName": {
              "type": "string"
            },
            "vcRedistInstaller": {
              "type": "string"
            },
            "vDOTInstaller": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "virtualNetworkResourceGroupName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "variables": {
            "autoImageVersion": "[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imageMinorVersion'))]",
            "cloud": "[environment().name]",
            "imageSuffix": "[take(parameters('deploymentNameSuffix'), 9)]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "localAdministratorPassword": "[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                  "localAdministratorUsername": "[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "userAssignedIdentityResourceGroupName": {
                    "value": "[parameters('userAssignedIdentityResourceGroupName')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('imageVirtualMachineName')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "virtualNetworkResourceGroupName": {
                    "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/')[4]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "3868434678079461490"
                    }
                  },
                  "parameters": {
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceGroupName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-05-01",
                      "name": "nsg-image-vm",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "default-allow-3389",
                            "properties": {
                              "priority": 1000,
                              "access": "Allow",
                              "direction": "Inbound",
                              "destinationPortRange": "3389",
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "*"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2022-05-01",
                      "name": "[take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "[parameters('marketplaceImagePublisher')]",
                            "offer": "[parameters('marketplaceImageOffer')]",
                            "sku": "[parameters('marketplaceImageSKU')]",
                            "version": "latest"
                          },
                          "osDisk": {
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "StandardSSD_LRS"
                            }
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "ResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                    },
                    "ResourceGroupName": {
                      "type": "string",
                      "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '/')[4]]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('custom-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDriveForBusiness": {
                    "value": "[parameters('installOneDriveForBusiness')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageEndpoint": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tenantType": {
                    "value": "[parameters('tenantType')]"
                  },
                  "userAssignedIdentityObjectId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
                  },
                  "vmName": {
                    "value": "[parameters('imageVirtualMachineName')]"
                  },
                  "vDotInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "7965137127816765885"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDriveForBusiness": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageEndpoint": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "tenantType": {
                      "type": "string"
                    },
                    "userAssignedIdentityObjectId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDotInstaller": {
                      "type": "string"
                    },
                    "vmName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "installAccessVar": "[format('{0}installAccess', parameters('installAccess'))]",
                    "installers": "[parameters('customizations')]",
                    "installExcelVar": "[format('{0}installWord', parameters('installExcel'))]",
                    "installOneDriveForBusinessVar": "[format('{0}installOneDrive', parameters('installOneDriveForBusiness'))]",
                    "installOneNoteVar": "[format('{0}installOneNote', parameters('installOneNote'))]",
                    "installOutlookVar": "[format('{0}installOutlook', parameters('installOutlook'))]",
                    "installPowerPointVar": "[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                    "installProjectVar": "[format('{0}installProject', parameters('installProject'))]",
                    "installPublisherVar": "[format('{0}installPublisher', parameters('installPublisher'))]",
                    "installSkypeForBusinessVar": "[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                    "installVisioVar": "[format('{0}installVisio', parameters('installVisio'))]",
                    "installWordVar": "[format('{0}installWord', parameters('installWord'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "applications",
                        "count": "[length(variables('installers'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "Blobname",
                            "value": "[variables('installers')[copyIndex()].blobName]"
                          },
                          {
                            "name": "Installer",
                            "value": "[variables('installers')[copyIndex()].name]"
                          },
                          {
                            "name": "Arguments",
                            "value": "[variables('installers')[copyIndex()].arguments]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$Installer,\r\n        [string]$Arguments\r\n        )\r\n        $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n        $StorageAccountName = $StorageAccountName\r\n        $ContainerName = $ContainerName\r\n        $BlobName = $BlobName\r\n        $StorageAccountUrl = $StorageEndpoint\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $env:windir\\temp\\$Installer\\Files\\$Blobname\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse \r\n        }\r\n      "
                        }
                      }
                    },
                    {
                      "condition": "[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDriveForBusiness')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'office')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "parameters": [
                          {
                            "name": "InstallAccess",
                            "value": "[variables('installAccessVar')]"
                          },
                          {
                            "name": "InstallWord",
                            "value": "[variables('installWordVar')]"
                          },
                          {
                            "name": "InstallExcel",
                            "value": "[variables('installExcelVar')]"
                          },
                          {
                            "name": "InstallOneDriveForBusiness",
                            "value": "[variables('installOneDriveForBusinessVar')]"
                          },
                          {
                            "name": "InstallOneNote",
                            "value": "[variables('installOneNoteVar')]"
                          },
                          {
                            "name": "InstallOutlook",
                            "value": "[variables('installOutlookVar')]"
                          },
                          {
                            "name": "InstallPowerPoint",
                            "value": "[variables('installPowerPointVar')]"
                          },
                          {
                            "name": "InstallProject",
                            "value": "[variables('installProjectVar')]"
                          },
                          {
                            "name": "InstallPublisher",
                            "value": "[variables('installPublisherVar')]"
                          },
                          {
                            "name": "InstallSkypeForBusiness",
                            "value": "[variables('installSkypeForBusinessVar')]"
                          },
                          {
                            "name": "InstallVisio",
                            "value": "[variables('installVisioVar')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('officeInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n      [string]$InstallAccess,\r\n      [string]$InstallExcel,\r\n      [string]$InstallOneDriveForBusiness,\r\n      [string]$InstallOutlook,\r\n      [string]$InstallProject,\r\n      [string]$InstallPublisher,\r\n      [string]$InstallSkypeForBusiness,\r\n      [string]$InstallVisio,\r\n      [string]$InstallWord,\r\n      [string]$InstallOneNote,\r\n      [string]$InstallPowerPoint,\r\n      [string]$UserAssignedIdentityObjectId,\r\n      [string]$StorageAccountName,\r\n      [string]$ContainerName,\r\n      [string]$StorageEndpoint,\r\n      [string]$BlobName\r\n      )\r\n      $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n      $StorageAccountName = $StorageAccountName\r\n      $ContainerName = $ContainerName\r\n      $BlobName = $BlobName\r\n      $StorageAccountUrl = $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          $excludeAccess = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          $excludeExcel = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDriveForBusiness -notlike '*true*'){\r\n          $excludeOneDriveForBusiness = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Groove\" />'\r\n      }\r\n      if($InstallOneDriveForBusiness -notlike '*true*'){\r\n        $excludeOneDriveForBusiness = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Groove\" />'\r\n    }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          $excludeOneNote = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          $excludeOutlook = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          $excludePowerPoint = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          $excludePublisher = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          $excludeSkypeForBusiness= Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          $excludeSkypeForBusiness= Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      $o365Settings = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          $o365SharedActivation = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      $o365Configfooter = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Configuration>'\r\n      $ErrorActionPreference = \"Stop\"\r\n      $Installer = \"$env:windir\\temp\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications"
                      ]
                    },
                    {
                      "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'vdot')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('vDotInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n        )\r\n        $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n        $StorageAccountName = $StorageAccountName\r\n        $ContainerName = $ContainerName\r\n        $BlobName = $BlobName\r\n        $StorageAccountUrl = $StorageEndpoint\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        $ErrorActionPreference = \"Stop\"\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n        Write-Host \"Optimized the operating system using the Virtual Desktop Optimization Tool\"\r\n      "
                        },
                        "timeoutInSeconds": 640
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('vmName'), 'office')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('vmName'), 'teams')]"
                      ]
                    },
                    {
                      "condition": "[parameters('installTeams')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'teams')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "parameters": [
                          {
                            "name": "TenantType",
                            "value": "[parameters('tenantType')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('teamsInstaller')]"
                          },
                          {
                            "name": "BlobName2",
                            "value": "[parameters('vcRedistInstaller')]"
                          },
                          {
                            "name": "BlobName3",
                            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$TenantType,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n        )\r\n      If($TenantType -eq \"Commercial\")\r\n      {\r\n        $TeamsUrl = \"https://teams.microsoft.com/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true\"\r\n      }\r\n      If($TenantType -eq \"DepartmentOfDefense\")\r\n      {\r\n        $TeamsUrl = \"https://dod.teams.microsoft.us/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true\"\r\n      }\r\n      If($TenantType -eq \"GovernmentCommunityCloud\")\r\n      {\r\n        $TeamsUrl = \"https://teams.microsoft.com/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&ring=general_gcc&download=true\"\r\n      }\r\n      If($TenantType -eq \"GovernmentCommunityCloudHigh\")\r\n      {\r\n        $TeamsUrl = \"https://gov.teams.microsoft.us/downloads/desktopurl?env=production&plat=windows&arch=x64&managedInstaller=true&download=true\"\r\n      }\r\n      Write-Host $($TeamsUrl)\r\n      $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n      $StorageAccountName = $StorageAccountName\r\n      $ContainerName = $ContainerName\r\n      $BlobName = $BlobName\r\n      $StorageAccountUrl = $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('vmName'), 'office')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "tenantType": {
                      "type": "string",
                      "value": "[parameters('tenantType')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "localAdministratorPassword": "[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                  "localAdministratorUsername": "[if(parameters('enableBuildAutomation'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageEndpoint": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "userAssignedIdentityResourceGroupName": {
                    "value": "[parameters('userAssignedIdentityResourceGroupName')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "virtualNetworkResourceGroup": {
                    "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/')[4]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "2175869603072156146"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceGroupName": {
                      "type": "string"
                    },
                    "storageEndpoint": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "installers": [
                      {
                        "name": "AzModules",
                        "blobName": "Az-Cmdlets-10.2.0.37547-x64.msi",
                        "arguments": "/i Az-Cmdlets-10.2.0.37547-x64.msi /qn /norestart",
                        "enabled": true
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-05-01",
                      "name": "nsg-image-vm",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": [
                          {
                            "name": "default-allow-3389",
                            "properties": {
                              "priority": 1000,
                              "access": "Allow",
                              "direction": "Inbound",
                              "destinationPortRange": "3389",
                              "protocol": "Tcp",
                              "sourcePortRange": "*",
                              "sourceAddressPrefix": "*",
                              "destinationAddressPrefix": "*"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2022-05-01",
                      "name": "[take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('virtualNetworkResourceGroup')), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), parameters('subnetName'))]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            }
                          },
                          "dataDisks": []
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Window_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 15))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "modules",
                        "count": "[length(variables('installers'))]"
                      },
                      "condition": "[variables('installers')[copyIndex()].enabled]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), format('app{0}', variables('installers')[copyIndex()].name))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[variables('installers')[copyIndex()].blobName]"
                          },
                          {
                            "name": "Arguments",
                            "value": "[variables('installers')[copyIndex()].arguments]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$Arguments\r\n        )\r\n        $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n        $ContainerName = $ContainerName\r\n        $BlobName = $BlobName\r\n        $StorageAccountUrl = $StorageEndpoint\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$Blobname\"\r\n        Start-Sleep -Seconds 60\r\n        Set-Location -Path $env:windir\\temp\r\n\r\n        # Install PowerSHell Modules\r\n        Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n        Get-InstalledModule | Where-Object {$_.name -like \"Az\"}\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('restart-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cloud": {
                    "value": "[variables('cloud')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceGroupName.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "userAssignedIdentityResourceGroupName": {
                    "value": "[parameters('userAssignedIdentityResourceGroupName')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "5562374981564876716"
                    }
                  },
                  "parameters": {
                    "cloud": {
                      "type": "string"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceGroupName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'restartVm')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": false,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "miId",
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId]"
                          },
                          {
                            "name": "imageVmRg",
                            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Compute/virtualMachines', parameters('imageVirtualMachineName')), '/')[4]]"
                          },
                          {
                            "name": "imageVmName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[parameters('cloud')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$miId,\r\n        [string]$imageVmRg,\r\n        [string]$imageVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miId -Environment $Environment # Run on the virtual machine\r\n        # Restart VM\r\n        Restart-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg\r\n\r\n        $lastProvisioningState = \"\"\r\n        $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n        $condition = ($provisioningState -eq \"PowerState/running\")\r\n        while (!$condition) {\r\n          if ($lastProvisioningState -ne $provisioningState) {\r\n            write-host $imageVmName \"under\" $imageVmRg \"is\" $provisioningState \"(waiting for state change)\"\r\n          }\r\n          $lastProvisioningState = $provisioningState\r\n\r\n          Start-Sleep -Seconds 5\r\n          $provisioningState = (Get-AzVM -resourcegroupname $imageVmRg -name $imageVmName -Status).Statuses[1].Code\r\n\r\n          $condition = ($provisioningState -eq \"PowerState/running\")\r\n        }\r\n        write-host $imageVmName \"under\" $imageVmRg \"is\" $provisioningState\r\n        start-sleep 30\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageEndpoint": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityObjectId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "9213852178572442531"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageEndpoint": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityObjectId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'sysprep')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          }
                        ],
                        "source": {
                          "script": "    param(\r\n      [string]$UserAssignedIdentityObjectId,\r\n      [string]$StorageAccountName,\r\n      [string]$ContainerName,\r\n      [string]$StorageEndpoint\r\n      )\r\n      $UserAssignedIdentityObjectId = $UserAssignedIdentityObjectId\r\n      $StorageAccountName = $StorageAccountName\r\n      $ContainerName = $ContainerName\r\n      $BlobName = 'New-PepareVHDToUploadToAzure.ps1'\r\n      $StorageAccountUrl = $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $env:windir\\temp\\$BlobName\r\n      Start-Sleep -Seconds 60\r\n      Set-Location -Path $env:windir\\temp\r\n      .\\New-PepareVHDToUploadToAzure.ps1\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cloud": {
                    "value": "[variables('cloud')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceGroupName.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "userAssignedIdentityResourceGroupName": {
                    "value": "[parameters('userAssignedIdentityResourceGroupName')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "7638710455549607300"
                    }
                  },
                  "parameters": {
                    "cloud": {
                      "type": "string"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceGroupName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'generalize')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": false,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "miId",
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId]"
                          },
                          {
                            "name": "imageVmRg",
                            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Compute/virtualMachines', parameters('imageVirtualMachineName')), '/')[4]]"
                          },
                          {
                            "name": "imageVmName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          {
                            "name": "managementVmRg",
                            "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '/')[4]]"
                          },
                          {
                            "name": "managementVmName",
                            "value": "[parameters('virtualMachineName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[parameters('cloud')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$miId,\r\n        [string]$imageVmRg,\r\n        [string]$imageVmName,\r\n        [string]$managementVmRg,\r\n        [string]$managementVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miId -Environment $Environment # Run on the virtual machine\r\n\r\n        Start-Sleep 30\r\n        \r\n        # Generalize VM Using PowerShell\r\n        Set-AzVm -ResourceGroupName $imageVmRg -Name $imageVmName -Generalized\r\n\r\n        Write-Host \"Generalized\" \r\n\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('gallery-image-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('galleryResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "galleryName": {
                    "value": "[parameters('galleryName')]"
                  },
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "imageVersionNumber": {
                    "value": "[variables('autoImageVersion')]"
                  },
                  "imageVirtualMachineResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "905448038635729815"
                    }
                  },
                  "parameters": {
                    "allowDeletionOfReplicatedLocations": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "excludeFromLatest": {
                      "type": "bool"
                    },
                    "galleryName": {
                      "type": "string"
                    },
                    "hyperVGeneration": {
                      "type": "string",
                      "defaultValue": "V2"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageVersionNumber": {
                      "type": "string"
                    },
                    "imageVirtualMachineResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "replicationMode": {
                      "type": "string",
                      "defaultValue": "Full"
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "Standard_LRS"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/galleries/images",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}', parameters('galleryName'), parameters('imageDefinitionName'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "architecture": "x64",
                        "features": [
                          {
                            "name": "IsHibernateSupported",
                            "value": "True"
                          },
                          {
                            "name": "IsAcceleratedNetworkSupported",
                            "value": "True"
                          },
                          {
                            "name": "SecurityType",
                            "value": "TrustedLaunch"
                          }
                        ],
                        "hyperVGeneration": "[parameters('hyperVGeneration')]",
                        "identifier": {
                          "offer": "[parameters('marketplaceImageOffer')]",
                          "publisher": "[parameters('marketplaceImagePublisher')]",
                          "sku": "[parameters('imageDefinitionName')]"
                        },
                        "osState": "Generalized",
                        "osType": "Windows"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/galleries/images/versions",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publishingProfile": {
                          "excludeFromLatest": "[parameters('excludeFromLatest')]",
                          "replicaCount": "[parameters('replicaCount')]",
                          "replicationMode": "[parameters('replicationMode')]",
                          "storageAccountType": "[parameters('storageAccountType')]",
                          "targetRegions": [
                            {
                              "excludeFromLatest": "[parameters('excludeFromLatest')]",
                              "name": "[parameters('location')]",
                              "regionalReplicaCount": "[parameters('replicaCount')]",
                              "storageAccountType": "[parameters('storageAccountType')]"
                            }
                          ]
                        },
                        "safetyProfile": {
                          "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                        },
                        "storageProfile": {
                          "source": {
                            "id": "[parameters('imageVirtualMachineResourceId')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('imageDefinitionName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "galleryName": {
                      "type": "string",
                      "value": "[parameters('galleryName')]"
                    },
                    "imageDefinitionName": {
                      "type": "string",
                      "value": "[parameters('imageDefinitionName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cloud": {
                    "value": "[variables('cloud')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.ResourceGroupName.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "userAssignedIdentityResourceGroupName": {
                    "value": "[parameters('userAssignedIdentityResourceGroupName')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "9803358863145867514"
                    }
                  },
                  "parameters": {
                    "cloud": {
                      "type": "string"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceGroupName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'removeVm')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": false,
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "miId",
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId]"
                          },
                          {
                            "name": "imageVmRg",
                            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Compute/virtualMachines', parameters('imageVirtualMachineName')), '/')[4]]"
                          },
                          {
                            "name": "imageVmName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          {
                            "name": "managementVmRg",
                            "value": "[split(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '/')[4]]"
                          },
                          {
                            "name": "managementVmName",
                            "value": "[parameters('virtualMachineName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[parameters('cloud')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$miId,\r\n        [string]$imageVmRg,\r\n        [string]$imageVmName,\r\n        [string]$managementVmRg,\r\n        [string]$managementVmName,\r\n        [string]$Environment\r\n        )\r\n        # Connect to Azure\r\n        Connect-AzAccount -Identity -AccountId $miId -Environment $Environment # Run on the virtual machine\r\n\r\n        # Remove Image VM and Management VM\r\n\r\n        Remove-AzVM -Name $imageVmName -ResourceGroupName $imageVmRg -ForceDeletion $true -Force\r\n\r\n        Remove-AzVM -Name $managementVmName -ResourceGroupName $managementVmRg -NoWait -ForceDeletion $true -Force -AsJob\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('galleryResourceGroupName')), 'Microsoft.Resources/deployments', format('gallery-image-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('custom-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      }
    }
  ]
}