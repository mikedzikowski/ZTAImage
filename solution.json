{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.23.1.45101",
      "templateHash": "2891080410543400962"
    }
  },
  "parameters": {
    "arcGisProInstaller": {
      "type": "string",
      "defaultValue": ""
    },
    "actionGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "automationAccountName": {
      "type": "string"
    },
    "automationAccountPrivateDnsZoneResourceId": {
      "type": "string"
    },
    "computeGalleryImageResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "computeGalleryName": {
      "type": "string"
    },
    "containerName": {
      "type": "string"
    },
    "customizations": {
      "type": "array",
      "defaultValue": []
    },
    "diskEncryptionSetResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "distributionGroup": {
      "type": "string",
      "defaultValue": ""
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow('yyMMddHHs')]"
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": ""
    },
    "domainJoinUserPrincipalName": {
      "type": "string",
      "defaultValue": ""
    },
    "domainName": {
      "type": "string",
      "defaultValue": ""
    },
    "enableBuildAutomation": {
      "type": "bool"
    },
    "excludeFromLatest": {
      "type": "bool",
      "defaultValue": true
    },
    "exemptPolicyAssignmentIds": {
      "type": "array",
      "defaultValue": []
    },
    "hybridUseBenefit": {
      "type": "bool"
    },
    "hybridWorkerName": {
      "type": "string",
      "defaultValue": ""
    },
    "imageDefinitionNamePrefix": {
      "type": "string"
    },
    "imageMajorVersion": {
      "type": "int"
    },
    "imageMinorVersion": {
      "type": "int"
    },
    "installAccess": {
      "type": "bool"
    },
    "installArcGisPro": {
      "type": "bool"
    },
    "installExcel": {
      "type": "bool"
    },
    "installOneDrive": {
      "type": "bool"
    },
    "installOneNote": {
      "type": "bool"
    },
    "installOutlook": {
      "type": "bool"
    },
    "installPowerPoint": {
      "type": "bool"
    },
    "installProject": {
      "type": "bool"
    },
    "installPublisher": {
      "type": "bool"
    },
    "installSkypeForBusiness": {
      "type": "bool"
    },
    "installTeams": {
      "type": "bool"
    },
    "installVirtualDesktopOptimizationTool": {
      "type": "bool"
    },
    "installVisio": {
      "type": "bool"
    },
    "installWord": {
      "type": "bool"
    },
    "keyVaultName": {
      "type": "string"
    },
    "keyVaultPrivateDnsZoneResourceId": {
      "type": "string"
    },
    "localAdministratorPassword": {
      "type": "securestring"
    },
    "localAdministratorUsername": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]"
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "marketplaceImageOffer": {
      "type": "string",
      "defaultValue": ""
    },
    "marketplaceImagePublisher": {
      "type": "string",
      "defaultValue": ""
    },
    "marketplaceImageSKU": {
      "type": "string",
      "defaultValue": ""
    },
    "msrdcwebrtcsvcInstaller": {
      "type": "string",
      "defaultValue": ""
    },
    "existingResourceGroup": {
      "type": "bool",
      "defaultValue": false
    },
    "officeInstaller": {
      "type": "string",
      "defaultValue": ""
    },
    "oUPath": {
      "type": "string"
    },
    "replicaCount": {
      "type": "int"
    },
    "resourceGroupName": {
      "type": "string"
    },
    "sourceImageType": {
      "type": "string",
      "allowedValues": [
        "AzureComputeGallery",
        "AzureMarketplace"
      ]
    },
    "storageAccountResourceId": {
      "type": "string"
    },
    "subnetResourceId": {
      "type": "string"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "teamsInstaller": {
      "type": "string",
      "defaultValue": ""
    },
    "userAssignedIdentityName": {
      "type": "string"
    },
    "vcRedistInstaller": {
      "type": "string",
      "defaultValue": ""
    },
    "vDOTInstaller": {
      "type": "string",
      "defaultValue": ""
    },
    "virtualMachineSize": {
      "type": "string"
    }
  },
  "variables": {
    "imageDefinitionName": "[if(empty(parameters('computeGalleryImageResourceId')), format('{0}-{1}', parameters('imageDefinitionNamePrefix'), parameters('marketplaceImageSKU')), format('{0}-{1}', parameters('imageDefinitionNamePrefix'), split(parameters('computeGalleryImageResourceId'), '/')[10]))]",
    "imageVirtualMachineName": "[take(format('vmimg-{0}', uniqueString(parameters('deploymentNameSuffix'))), 15)]",
    "managementVirtualMachineName": "[if(empty(parameters('hybridWorkerName')), take(format('vmmgt-{0}', uniqueString(parameters('deploymentNameSuffix'))), 15), parameters('hybridWorkerName'))]",
    "subscriptionId": "[subscription().subscriptionId]",
    "timeZones": {
      "australiacentral": "AUS Eastern Standard Time",
      "australiacentral2": "AUS Eastern Standard Time",
      "australiaeast": "AUS Eastern Standard Time",
      "australiasoutheast": "AUS Eastern Standard Time",
      "brazilsouth": "E. South America Standard Time",
      "brazilsoutheast": "E. South America Standard Time",
      "canadacentral": "Eastern Standard Time",
      "canadaeast": "Eastern Standard Time",
      "centralindia": "India Standard Time",
      "centralus": "Central Standard Time",
      "chinaeast": "China Standard Time",
      "chinaeast2": "China Standard Time",
      "chinanorth": "China Standard Time",
      "chinanorth2": "China Standard Time",
      "eastasia": "China Standard Time",
      "eastus": "Eastern Standard Time",
      "eastus2": "Eastern Standard Time",
      "francecentral": "Central Europe Standard Time",
      "francesouth": "Central Europe Standard Time",
      "germanynorth": "Central Europe Standard Time",
      "germanywestcentral": "Central Europe Standard Time",
      "japaneast": "Tokyo Standard Time",
      "japanwest": "Tokyo Standard Time",
      "jioindiacentral": "India Standard Time",
      "jioindiawest": "India Standard Time",
      "koreacentral": "Korea Standard Time",
      "koreasouth": "Korea Standard Time",
      "northcentralus": "Central Standard Time",
      "northeurope": "GMT Standard Time",
      "norwayeast": "Central Europe Standard Time",
      "norwaywest": "Central Europe Standard Time",
      "southafricanorth": "South Africa Standard Time",
      "southafricawest": "South Africa Standard Time",
      "southcentralus": "Central Standard Time",
      "southeastasia": "Singapore Standard Time",
      "southindia": "India Standard Time",
      "swedencentral": "Central Europe Standard Time",
      "switzerlandnorth": "Central Europe Standard Time",
      "switzerlandwest": "Central Europe Standard Time",
      "uaecentral": "Arabian Standard Time",
      "uaenorth": "Arabian Standard Time",
      "uksouth": "GMT Standard Time",
      "ukwest": "GMT Standard Time",
      "usdodcentral": "Central Standard Time",
      "usdodeast": "Eastern Standard Time",
      "usgovarizona": "Mountain Standard Time",
      "usgovtexas": "Central Standard Time",
      "usgovvirginia": "Eastern Standard Time",
      "westcentralus": "Mountain Standard Time",
      "westeurope": "Central Europe Standard Time",
      "westindia": "India Standard Time",
      "westus": "Pacific Standard Time",
      "westus2": "Pacific Standard Time",
      "westus3": "Mountain Standard Time"
    }
  },
  "resources": [
    {
      "condition": "[not(parameters('existingResourceGroup'))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2019-05-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('baseline-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "computeGalleryImageResourceId": {
            "value": "[parameters('computeGalleryImageResourceId')]"
          },
          "computeGalleryName": {
            "value": "[parameters('computeGalleryName')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[parameters('diskEncryptionSetResourceId')]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "exemptPolicyAssignmentIds": {
            "value": "[parameters('exemptPolicyAssignmentIds')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "resourceGroupName": "[if(parameters('existingResourceGroup'), createObject('value', parameters('resourceGroupName')), createObject('value', parameters('resourceGroupName')))]",
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityName": {
            "value": "[parameters('userAssignedIdentityName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "18168377176206486327"
            }
          },
          "parameters": {
            "computeGalleryImageResourceId": {
              "type": "string"
            },
            "computeGalleryName": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool"
            },
            "exemptPolicyAssignmentIds": {
              "type": "array"
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string"
            },
            "marketplaceImagePublisher": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "7509213980401697834"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject())]"
                    }
                  ],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('role-assignment-compute-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "6723251068600901255"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionIds": [
                      "f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "f1a07417-d97a-45cb-824c-7a7467783830",
                      "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(variables('roleDefinitionIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionIds')[copyIndex()], resourceGroup().name)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionIds')[copyIndex()])]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('role-assignment-storage-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "6066625483046035261"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', split(parameters('storageAccountResourceId'), '/')[8])]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountResourceId'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('disk-encryption-set-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('diskEncryptionSetResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('diskEncryptionSetResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskEncryptionSetName": {
                    "value": "[split(parameters('diskEncryptionSetResourceId'), '/')[8]]"
                  },
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "232318668447629435"
                    }
                  },
                  "parameters": {
                    "diskEncryptionSetName": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/diskEncryptionSets/{0}', parameters('diskEncryptionSetName'))]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('gallery-image-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "computeGalleryName": {
                    "value": "[parameters('computeGalleryName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "7729223795303614524"
                    }
                  },
                  "parameters": {
                    "computeGalleryName": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/galleries",
                      "apiVersion": "2022-01-03",
                      "name": "[parameters('computeGalleryName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]"
                    },
                    {
                      "condition": "[parameters('enableBuildAutomation')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('computeGalleryName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), variables('roleDefinitionId'), resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "computeGalleryResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "policyExemptions",
                "count": "[length(range(0, length(parameters('exemptPolicyAssignmentIds'))))]"
              },
              "condition": "[not(empty(parameters('exemptPolicyAssignmentIds')[0]))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('PolicyExemption_{0}', range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()])]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "policyAssignmentId": {
                    "value": "[parameters('exemptPolicyAssignmentIds')[range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()]]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "17745412693819631257"
                    }
                  },
                  "parameters": {
                    "policyAssignmentId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyExemptions",
                      "apiVersion": "2022-07-01-preview",
                      "name": "exempt-imaging-resource-group",
                      "properties": {
                        "assignmentScopeValidation": "Default",
                        "description": "Exempts the imaging resource group to prevent issues with building images.",
                        "displayName": "Imaging resource group",
                        "exemptionCategory": "Mitigated",
                        "expiresOn": null,
                        "metadata": null,
                        "policyAssignmentId": "[parameters('policyAssignmentId')]",
                        "policyDefinitionReferenceIds": [],
                        "resourceSelectors": []
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "computeGalleryResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('gallery-image-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.computeGalleryResourceId.value]"
            },
            "userAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('enableBuildAutomation')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('build-automation-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "actionGroupName": {
            "value": "[parameters('actionGroupName')]"
          },
          "arcGisProInstaller": {
            "value": "[parameters('arcGisProInstaller')]"
          },
          "automationAccountName": {
            "value": "[parameters('automationAccountName')]"
          },
          "automationAccountPrivateDnsZoneResourceId": {
            "value": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
          },
          "computeGalleryImageResourceId": {
            "value": "[parameters('computeGalleryImageResourceId')]"
          },
          "computeGalleryResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.computeGalleryResourceId.value]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[parameters('diskEncryptionSetResourceId')]"
          },
          "distributionGroup": {
            "value": "[parameters('distributionGroup')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('excludeFromLatest')]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "imageMajorVersion": {
            "value": "[parameters('imageMajorVersion')]"
          },
          "imageMinorVersion": {
            "value": "[parameters('imageMinorVersion')]"
          },
          "imageVirtualMachineName": {
            "value": "[variables('imageVirtualMachineName')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installArcGisPro": {
            "value": "[parameters('installArcGisPro')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDrive": {
            "value": "[parameters('installOneDrive')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installPublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
          },
          "managementVirtualMachineName": {
            "value": "[variables('managementVirtualMachineName')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "marketplaceImageSKU": {
            "value": "[parameters('marketplaceImageSKU')]"
          },
          "msrdcwebrtcsvcInstaller": {
            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
          },
          "officeInstaller": {
            "value": "[parameters('officeInstaller')]"
          },
          "oUPath": {
            "value": "[parameters('oUPath')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "resourceGroupName": "[if(parameters('existingResourceGroup'), createObject('value', parameters('resourceGroupName')), createObject('value', parameters('resourceGroupName')))]",
          "sourceImageType": {
            "value": "[parameters('sourceImageType')]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "subnetResourceId": {
            "value": "[parameters('subnetResourceId')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "teamsInstaller": {
            "value": "[parameters('teamsInstaller')]"
          },
          "timeZone": {
            "value": "[variables('timeZones')[parameters('location')]]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "vcRedistInstaller": {
            "value": "[parameters('vcRedistInstaller')]"
          },
          "vDOTInstaller": {
            "value": "[parameters('vDOTInstaller')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "825940512311059857"
            }
          },
          "parameters": {
            "actionGroupName": {
              "type": "string"
            },
            "arcGisProInstaller": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "automationAccountPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "computeGalleryResourceId": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "customizations": {
              "type": "array"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "distributionGroup": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool"
            },
            "excludeFromLatest": {
              "type": "bool"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "imageMajorVersion": {
              "type": "int"
            },
            "imageMinorVersion": {
              "type": "int"
            },
            "imageVirtualMachineName": {
              "type": "string"
            },
            "installAccess": {
              "type": "bool"
            },
            "installArcGisPro": {
              "type": "bool"
            },
            "installExcel": {
              "type": "bool"
            },
            "installOneDrive": {
              "type": "bool"
            },
            "installOneNote": {
              "type": "bool"
            },
            "installOutlook": {
              "type": "bool"
            },
            "installPowerPoint": {
              "type": "bool"
            },
            "installProject": {
              "type": "bool"
            },
            "installPublisher": {
              "type": "bool"
            },
            "installSkypeForBusiness": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "installVisio": {
              "type": "bool"
            },
            "installWord": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string"
            },
            "marketplaceImagePublisher": {
              "type": "string"
            },
            "marketplaceImageSKU": {
              "type": "string"
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string"
            },
            "officeInstaller": {
              "type": "string"
            },
            "oUPath": {
              "type": "string"
            },
            "replicaCount": {
              "type": "int"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "computeGalleryImageResourceId": {
              "type": "string"
            },
            "sourceImageType": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "teamsInstaller": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "vcRedistInstaller": {
              "type": "string"
            },
            "vDOTInstaller": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "variables": {
            "storageAccountName": "[split(parameters('storageAccountResourceId'), '/')[8]]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, 'KeyVaultDeployAction')]",
              "properties": {
                "roleName": "[format('KeyVaultDeployAction_{0}', subscription().subscriptionId)]",
                "description": "Allows a principal to get but not view Key Vault secrets for ARM template deployments.",
                "assignableScopes": [
                  "[subscription().id]"
                ],
                "permissions": [
                  {
                    "actions": [
                      "Microsoft.KeyVault/vaults/deploy/action"
                    ]
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('virtual-network-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('subnetResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('subnetResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[split(parameters('subnetResourceId'), '/')[8]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "6008613429063413622"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('key-vault-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "roleDefinitionResourceId": {
                    "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "13011862520975547343"
                    }
                  },
                  "parameters": {
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "roleDefinitionResourceId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "privateEndpointName": "[format('pe-{0}', parameters('keyVaultName'))]",
                    "Secrets": [
                      {
                        "name": "DomainJoinPassword",
                        "value": "[parameters('domainJoinPassword')]"
                      },
                      {
                        "name": "DomainJoinUserPrincipalName",
                        "value": "[parameters('domainJoinUserPrincipalName')]"
                      },
                      {
                        "name": "LocalAdministratorPassword",
                        "value": "[parameters('localAdministratorPassword')]"
                      },
                      {
                        "name": "LocalAdministratorUsername",
                        "value": "[parameters('localAdministratorUsername')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": false,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": false,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "publicNetworkAccess": "Disabled"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateEndpointName')]",
                            "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ],
                        "customNetworkInterfaceName": "[format('nic-{0}', parameters('keyVaultName'))]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "privatelink-azure-automation-net",
                            "properties": {
                              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(variables('Secrets'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                      "properties": {
                        "value": "[variables('Secrets')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('roleDefinitionResourceId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionResourceId')]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('template-spec-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "10194190675379359498"
                    }
                  },
                  "parameters": {
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.23.1.45101",
                          "templateHash": "12335721332191006129"
                        }
                      },
                      "parameters": {
                        "arcGisProInstaller": {
                          "type": "string"
                        },
                        "computeGalleryName": {
                          "type": "string"
                        },
                        "containerName": {
                          "type": "string"
                        },
                        "customizations": {
                          "type": "array",
                          "defaultValue": []
                        },
                        "deploymentNameSuffix": {
                          "type": "string",
                          "defaultValue": "[[utcNow('yyMMddHHs')]"
                        },
                        "diskEncryptionSetResourceId": {
                          "type": "string"
                        },
                        "enableBuildAutomation": {
                          "type": "bool"
                        },
                        "excludeFromLatest": {
                          "type": "bool"
                        },
                        "hybridUseBenefit": {
                          "type": "bool"
                        },
                        "imageDefinitionName": {
                          "type": "string"
                        },
                        "imageMajorVersion": {
                          "type": "int"
                        },
                        "imageMinorVersion": {
                          "type": "int"
                        },
                        "imageVirtualMachineName": {
                          "type": "string"
                        },
                        "installAccess": {
                          "type": "bool"
                        },
                        "installArcGisPro": {
                          "type": "bool"
                        },
                        "installExcel": {
                          "type": "bool"
                        },
                        "installOneDrive": {
                          "type": "bool"
                        },
                        "installOneNote": {
                          "type": "bool"
                        },
                        "installOutlook": {
                          "type": "bool"
                        },
                        "installPowerPoint": {
                          "type": "bool"
                        },
                        "installProject": {
                          "type": "bool"
                        },
                        "installPublisher": {
                          "type": "bool"
                        },
                        "installSkypeForBusiness": {
                          "type": "bool"
                        },
                        "installTeams": {
                          "type": "bool"
                        },
                        "installVirtualDesktopOptimizationTool": {
                          "type": "bool"
                        },
                        "installVisio": {
                          "type": "bool"
                        },
                        "installWord": {
                          "type": "bool"
                        },
                        "keyVaultName": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "localAdministratorPassword": {
                          "type": "securestring",
                          "defaultValue": ""
                        },
                        "localAdministratorUsername": {
                          "type": "securestring",
                          "defaultValue": ""
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[resourceGroup().location]"
                        },
                        "managementVirtualMachineName": {
                          "type": "string"
                        },
                        "marketplaceImageOffer": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "marketplaceImagePublisher": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "marketplaceImageSKU": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "msrdcwebrtcsvcInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "officeInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "replicaCount": {
                          "type": "int"
                        },
                        "runbookExecution": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "computeGalleryImageResourceId": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "sourceImageType": {
                          "type": "string"
                        },
                        "storageAccountResourceId": {
                          "type": "string"
                        },
                        "subnetResourceId": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "object",
                          "defaultValue": {}
                        },
                        "teamsInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "userAssignedIdentityClientId": {
                          "type": "string"
                        },
                        "userAssignedIdentityPrincipalId": {
                          "type": "string"
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string"
                        },
                        "vcRedistInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "vDOTInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "virtualMachineSize": {
                          "type": "string"
                        }
                      },
                      "variables": {
                        "autoImageVersion": "[[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imageMinorVersion'))]",
                        "imageSuffix": "[[take(parameters('deploymentNameSuffix'), 9)]",
                        "resourceGroupName": "[[resourceGroup().name]",
                        "storageAccountName": "[[split(parameters('storageAccountResourceId'), '/')[8]]",
                        "storageEndpoint": "[[environment().suffixes.storage]",
                        "subscriptionId": "[[subscription().subscriptionId]"
                      },
                      "resources": [
                        {
                          "condition": "[[not(parameters('enableBuildAutomation'))]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[variables('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "diskEncryptionSetResourceId": {
                                "value": "[[parameters('diskEncryptionSetResourceId')]"
                              },
                              "hybridUseBenefit": {
                                "value": "[[parameters('hybridUseBenefit')]"
                              },
                              "localAdministratorPassword": {
                                "value": "[[parameters('localAdministratorPassword')]"
                              },
                              "localAdministratorUsername": {
                                "value": "[[parameters('localAdministratorUsername')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "storageAccountName": {
                                "value": "[[split(parameters('storageAccountResourceId'), '/')[8]]"
                              },
                              "subnetResourceId": {
                                "value": "[[parameters('subnetResourceId')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityPrincipalId": {
                                "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                              },
                              "userAssignedIdentityResourceId": {
                                "value": "[[parameters('userAssignedIdentityResourceId')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('managementVirtualMachineName')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "8820205774480521076"
                                }
                              },
                              "parameters": {
                                "containerName": {
                                  "type": "string"
                                },
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "hybridUseBenefit": {
                                  "type": "bool"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring"
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "storageAccountName": {
                                  "type": "string"
                                },
                                "subnetResourceId": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityPrincipalId": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2023-04-01",
                                  "name": "[[format('nic-{0}', parameters('virtualMachineName'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                                  "properties": {
                                    "ipConfigurations": [
                                      {
                                        "name": "ipconfig",
                                        "properties": {
                                          "privateIPAllocationMethod": "Dynamic",
                                          "subnet": {
                                            "id": "[[parameters('subnetResourceId')]"
                                          },
                                          "primary": true,
                                          "privateIPAddressVersion": "IPv4"
                                        }
                                      }
                                    ],
                                    "enableAcceleratedNetworking": true,
                                    "enableIPForwarding": false
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines",
                                  "apiVersion": "2022-03-01",
                                  "name": "[[parameters('virtualMachineName')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "identity": {
                                    "type": "UserAssigned",
                                    "userAssignedIdentities": {
                                      "[[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                    }
                                  },
                                  "properties": {
                                    "hardwareProfile": {
                                      "vmSize": "Standard_D2s_v3"
                                    },
                                    "osProfile": {
                                      "computerName": "[[parameters('virtualMachineName')]",
                                      "adminUsername": "[[parameters('localAdministratorUsername')]",
                                      "adminPassword": "[[parameters('localAdministratorPassword')]",
                                      "windowsConfiguration": {
                                        "provisionVMAgent": true,
                                        "enableAutomaticUpdates": true,
                                        "patchSettings": {
                                          "patchMode": "AutomaticByOS",
                                          "assessmentMode": "ImageDefault"
                                        }
                                      }
                                    },
                                    "storageProfile": {
                                      "imageReference": {
                                        "publisher": "MicrosoftWindowsServer",
                                        "offer": "WindowsServer",
                                        "sku": "2019-datacenter-core-g2",
                                        "version": "latest"
                                      },
                                      "osDisk": {
                                        "caching": "ReadWrite",
                                        "createOption": "FromImage",
                                        "deleteOption": "Delete",
                                        "managedDisk": {
                                          "diskEncryptionSet": {
                                            "id": "[[parameters('diskEncryptionSetResourceId')]"
                                          },
                                          "storageAccountType": "Premium_LRS"
                                        },
                                        "name": "[[format('disk-{0}', parameters('virtualMachineName'))]",
                                        "osType": "Windows"
                                      }
                                    },
                                    "networkProfile": {
                                      "networkInterfaces": [
                                        {
                                          "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                          "properties": {
                                            "deleteOption": "Delete"
                                          }
                                        }
                                      ]
                                    },
                                    "diagnosticsProfile": {
                                      "bootDiagnostics": {
                                        "enabled": false
                                      }
                                    },
                                    "securityProfile": {
                                      "encryptionAtHost": true,
                                      "uefiSettings": {
                                        "secureBootEnabled": true,
                                        "vTpmEnabled": true
                                      },
                                      "securityType": "TrustedLaunch"
                                    },
                                    "licenseType": "[[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[environment().suffixes.storage]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "name": {
                                  "type": "string",
                                  "value": "[[parameters('virtualMachineName')]"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "diskEncryptionSetResourceId": {
                                "value": "[[parameters('diskEncryptionSetResourceId')]"
                              },
                              "localAdministratorPassword": "[[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                              "localAdministratorUsername": "[[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "marketplaceImageOffer": {
                                "value": "[[parameters('marketplaceImageOffer')]"
                              },
                              "marketplaceImagePublisher": {
                                "value": "[[parameters('marketplaceImagePublisher')]"
                              },
                              "marketplaceImageSKU": {
                                "value": "[[parameters('marketplaceImageSKU')]"
                              },
                              "computeGalleryImageResourceId": {
                                "value": "[[parameters('computeGalleryImageResourceId')]"
                              },
                              "sourceImageType": {
                                "value": "[[parameters('sourceImageType')]"
                              },
                              "subnetResourceId": {
                                "value": "[[parameters('subnetResourceId')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityResourceId": {
                                "value": "[[parameters('userAssignedIdentityResourceId')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('imageVirtualMachineName')]"
                              },
                              "virtualMachineSize": {
                                "value": "[[parameters('virtualMachineSize')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "12018655233659210692"
                                }
                              },
                              "parameters": {
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring"
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "marketplaceImageSKU": {
                                  "type": "string"
                                },
                                "computeGalleryImageResourceId": {
                                  "type": "string"
                                },
                                "sourceImageType": {
                                  "type": "string"
                                },
                                "subnetResourceId": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                },
                                "virtualMachineSize": {
                                  "type": "string"
                                }
                              },
                              "variables": {
                                "imageReference": "[[if(equals(parameters('sourceImageType'), 'AzureComputeGallery'), createObject('id', parameters('computeGalleryImageResourceId')), createObject('publisher', parameters('marketplaceImagePublisher'), 'offer', parameters('marketplaceImageOffer'), 'sku', parameters('marketplaceImageSKU'), 'version', 'latest'))]"
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2022-05-01",
                                  "name": "[[format('nic-{0}', parameters('virtualMachineName'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                                  "properties": {
                                    "ipConfigurations": [
                                      {
                                        "name": "ipconfig1",
                                        "properties": {
                                          "privateIPAllocationMethod": "Dynamic",
                                          "subnet": {
                                            "id": "[[parameters('subnetResourceId')]"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines",
                                  "apiVersion": "2022-03-01",
                                  "name": "[[parameters('virtualMachineName')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "identity": {
                                    "type": "UserAssigned",
                                    "userAssignedIdentities": {
                                      "[[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                    }
                                  },
                                  "properties": {
                                    "hardwareProfile": {
                                      "vmSize": "[[parameters('virtualMachineSize')]"
                                    },
                                    "osProfile": {
                                      "computerName": "[[parameters('virtualMachineName')]",
                                      "adminUsername": "[[parameters('localAdministratorUsername')]",
                                      "adminPassword": "[[parameters('localAdministratorPassword')]"
                                    },
                                    "storageProfile": {
                                      "imageReference": "[[variables('imageReference')]",
                                      "osDisk": {
                                        "createOption": "FromImage",
                                        "deleteOption": "Delete",
                                        "managedDisk": {
                                          "storageAccountType": "StandardSSD_LRS"
                                        },
                                        "name": "[[format('disk-{0}', parameters('virtualMachineName'))]"
                                      }
                                    },
                                    "networkProfile": {
                                      "networkInterfaces": [
                                        {
                                          "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                          "properties": {
                                            "deleteOption": "Delete"
                                          }
                                        }
                                      ]
                                    },
                                    "diagnosticsProfile": {
                                      "bootDiagnostics": {
                                        "enabled": false
                                      }
                                    },
                                    "securityProfile": {
                                      "uefiSettings": {
                                        "secureBootEnabled": true,
                                        "vTpmEnabled": true
                                      },
                                      "securityType": "TrustedLaunch"
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "name": {
                                  "type": "string",
                                  "value": "[[parameters('virtualMachineName')]"
                                },
                                "resourceId": {
                                  "type": "string",
                                  "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('customizations-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "arcGisProInstaller": {
                                "value": "[[parameters('arcGisProInstaller')]"
                              },
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "customizations": {
                                "value": "[[parameters('customizations')]"
                              },
                              "installAccess": {
                                "value": "[[parameters('installAccess')]"
                              },
                              "installArcGisPro": {
                                "value": "[[parameters('installArcGisPro')]"
                              },
                              "installExcel": {
                                "value": "[[parameters('installExcel')]"
                              },
                              "installOneDrive": {
                                "value": "[[parameters('installOneDrive')]"
                              },
                              "installOneNote": {
                                "value": "[[parameters('installOneNote')]"
                              },
                              "installOutlook": {
                                "value": "[[parameters('installOutlook')]"
                              },
                              "installPowerPoint": {
                                "value": "[[parameters('installPowerPoint')]"
                              },
                              "installProject": {
                                "value": "[[parameters('installProject')]"
                              },
                              "installPublisher": {
                                "value": "[[parameters('installPublisher')]"
                              },
                              "installSkypeForBusiness": {
                                "value": "[[parameters('installSkypeForBusiness')]"
                              },
                              "installTeams": {
                                "value": "[[parameters('installTeams')]"
                              },
                              "installVirtualDesktopOptimizationTool": {
                                "value": "[[parameters('installVirtualDesktopOptimizationTool')]"
                              },
                              "installVisio": {
                                "value": "[[parameters('installVisio')]"
                              },
                              "installWord": {
                                "value": "[[parameters('installWord')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "msrdcwebrtcsvcInstaller": {
                                "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                              },
                              "officeInstaller": {
                                "value": "[[parameters('officeInstaller')]"
                              },
                              "storageAccountName": {
                                "value": "[[variables('storageAccountName')]"
                              },
                              "storageEndpoint": {
                                "value": "[[variables('storageEndpoint')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "teamsInstaller": {
                                "value": "[[parameters('teamsInstaller')]"
                              },
                              "userAssignedIdentityObjectId": {
                                "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                              },
                              "vcRedistInstaller": {
                                "value": "[[parameters('vcRedistInstaller')]"
                              },
                              "vDotInstaller": {
                                "value": "[[parameters('vDOTInstaller')]"
                              },
                              "virtualMachineName": {
                                "value": "[[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "3091204516823702660"
                                }
                              },
                              "parameters": {
                                "arcGisProInstaller": {
                                  "type": "string"
                                },
                                "containerName": {
                                  "type": "string"
                                },
                                "customizations": {
                                  "type": "array"
                                },
                                "installAccess": {
                                  "type": "bool"
                                },
                                "installArcGisPro": {
                                  "type": "bool"
                                },
                                "installExcel": {
                                  "type": "bool"
                                },
                                "installOneDrive": {
                                  "type": "bool"
                                },
                                "installOneNote": {
                                  "type": "bool"
                                },
                                "installOutlook": {
                                  "type": "bool"
                                },
                                "installPowerPoint": {
                                  "type": "bool"
                                },
                                "installProject": {
                                  "type": "bool"
                                },
                                "installPublisher": {
                                  "type": "bool"
                                },
                                "installSkypeForBusiness": {
                                  "type": "bool"
                                },
                                "installTeams": {
                                  "type": "bool"
                                },
                                "installVirtualDesktopOptimizationTool": {
                                  "type": "bool"
                                },
                                "installVisio": {
                                  "type": "bool"
                                },
                                "installWord": {
                                  "type": "bool"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "msrdcwebrtcsvcInstaller": {
                                  "type": "string"
                                },
                                "officeInstaller": {
                                  "type": "string"
                                },
                                "storageAccountName": {
                                  "type": "string"
                                },
                                "storageEndpoint": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "teamsInstaller": {
                                  "type": "string"
                                },
                                "userAssignedIdentityObjectId": {
                                  "type": "string"
                                },
                                "vcRedistInstaller": {
                                  "type": "string"
                                },
                                "vDotInstaller": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "variables": {
                                "installAccessVar": "[[format('{0}installAccess', parameters('installAccess'))]",
                                "installers": "[[parameters('customizations')]",
                                "installExcelVar": "[[format('{0}installWord', parameters('installExcel'))]",
                                "installOneDriveVar": "[[format('{0}installOneDrive', parameters('installOneDrive'))]",
                                "installOneNoteVar": "[[format('{0}installOneNote', parameters('installOneNote'))]",
                                "installOutlookVar": "[[format('{0}installOutlook', parameters('installOutlook'))]",
                                "installPowerPointVar": "[[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                                "installProjectVar": "[[format('{0}installProject', parameters('installProject'))]",
                                "installPublisherVar": "[[format('{0}installPublisher', parameters('installPublisher'))]",
                                "installSkypeForBusinessVar": "[[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                                "installVisioVar": "[[format('{0}installVisio', parameters('installVisio'))]",
                                "installWordVar": "[[format('{0}installWord', parameters('installWord'))]"
                              },
                              "resources": [
                                {
                                  "[string('copy')]": {
                                    "name": "applications",
                                    "count": "[[length(variables('installers'))]",
                                    "mode": "serial",
                                    "batchSize": 1
                                  },
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "Blobname",
                                        "value": "[[variables('installers')[copyIndex()].blobName]"
                                      },
                                      {
                                        "name": "Installer",
                                        "value": "[[variables('installers')[copyIndex()].name]"
                                      },
                                      {
                                        "name": "Arguments",
                                        "value": "[[variables('installers')[copyIndex()].arguments]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $env:windir\\temp\\$Installer\\Files\\$Blobname\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse\r\n        }\r\n      "
                                    }
                                  }
                                },
                                {
                                  "condition": "[[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDrive')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'office')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "InstallAccess",
                                        "value": "[[variables('installAccessVar')]"
                                      },
                                      {
                                        "name": "InstallWord",
                                        "value": "[[variables('installWordVar')]"
                                      },
                                      {
                                        "name": "InstallExcel",
                                        "value": "[[variables('installExcelVar')]"
                                      },
                                      {
                                        "name": "InstallOneDrive",
                                        "value": "[[variables('installOneDriveVar')]"
                                      },
                                      {
                                        "name": "InstallOneNote",
                                        "value": "[[variables('installOneNoteVar')]"
                                      },
                                      {
                                        "name": "InstallOutlook",
                                        "value": "[[variables('installOutlookVar')]"
                                      },
                                      {
                                        "name": "InstallPowerPoint",
                                        "value": "[[variables('installPowerPointVar')]"
                                      },
                                      {
                                        "name": "InstallProject",
                                        "value": "[[variables('installProjectVar')]"
                                      },
                                      {
                                        "name": "InstallPublisher",
                                        "value": "[[variables('installPublisherVar')]"
                                      },
                                      {
                                        "name": "InstallSkypeForBusiness",
                                        "value": "[[variables('installSkypeForBusinessVar')]"
                                      },
                                      {
                                        "name": "InstallVisio",
                                        "value": "[[variables('installVisioVar')]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('officeInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$InstallAccess,\r\n        [string]$InstallExcel,\r\n        [string]$InstallOneDrive,\r\n        [string]$InstallOutlook,\r\n        [string]$InstallProject,\r\n        [string]$InstallPublisher,\r\n        [string]$InstallSkypeForBusiness,\r\n        [string]$InstallVisio,\r\n        [string]$InstallWord,\r\n        [string]$InstallOneNote,\r\n        [string]$InstallPowerPoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDrive -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"OneDrive\" />'\r\n      }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Configuration>'\r\n      $Installer = \"$env:windir\\temp\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installVirtualDesktopOptimizationTool')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'vdot')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('vDotInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n      "
                                    },
                                    "timeoutInSeconds": 640
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installTeams')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'teams')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('teamsInstaller')]"
                                      },
                                      {
                                        "name": "BlobName2",
                                        "value": "[[parameters('vcRedistInstaller')]"
                                      },
                                      {
                                        "name": "BlobName3",
                                        "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installArcGisPro')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'arcGisPro')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('arcGisProInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      # Retrieve Files\r\n      New-Item -Path $env:windir\\temp -Name arcgis -ItemType \"directory\" -Force\r\n      $ZIP = \"$env:windir\\temp\\arcgispro.zip\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n      Start-Sleep -Seconds 30\r\n      Set-Location -Path $env:windir\\temp\r\n      Unblock-File -Path $ZIP\r\n      Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\\arcgis\" -Force\r\n\r\n      # Install Arcgis\r\n      $arcGisProMsi = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -eq \"ArcGisPro.msi\"})\r\n      $arcGisProMsp = (Get-ChildItem \"$env:windir\\temp\\arcgis\" -Recurse | where {$_.Extension -eq \".msp\"})\r\n      $winDesktopRuntime = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -like \"windowsdesktop-runtime-*\"})\r\n\r\n      # If found Install Windows Desktop Runtime Pre-Req\r\n      try {\r\n        if ($winDesktopRuntime ){\r\n            Start-Process -FilePath \"$($winDesktopRuntime.Directory.FullName)\\$winDesktopRuntime\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru\r\n        }\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n        # Install ArcGis Pro\r\n        $arcGisProArguments = \"/i $($arcGisProMsi.Directory.FullName)\\$arcGisProMsi ALLUSERS=1 ACCEPTEULA=yes ENABLEEUEI=0 SOFTWARE_CLASS=Professional AUTHORIZATION_TYPE=NAMED_USER LOCK_AUTH_SETTINGS=False ArcGIS_Connection=TRUE /qn /norestart\"\r\n        Start-Process \"msiexec.exe\" -ArgumentList $arcGisProArguments  -Wait -NoNewWindow -PassThru\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n      # If MSP is found, patch ArcGisPro with MSP file\r\n      if($arcGisProMsp){\r\n          Start-Process \"msiexec.exe\" -ArgumentList \"/p $($arcGisProMsp.Directory.FullName)\\$arcGisProMsp /qn\" -Wait -NoNewWindow -PassThru\r\n      }\r\n    }\r\n    catch {\r\n      Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n    }\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                                  ]
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('restart-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "imageVirtualMachineName": {
                                "value": "[[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[variables('resourceGroupName')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "17226869118757649079"
                                }
                              },
                              "parameters": {
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      {
                                        "name": "VirtualMachineName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[resourceId('Microsoft.Resources/deployments', format('customizations-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "virtualMachineName": {
                                "value": "[[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "18065835533900027286"
                                }
                              },
                              "parameters": {
                                "location": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'sysprepVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": false,
                                    "asyncExecution": true,
                                    "parameters": [],
                                    "source": {
                                      "script": "        Start-Sleep -Seconds 30\r\n        Remove-Item -LiteralPath 'C:\\Windows\\Panther' -Force -Recurse -ErrorAction SilentlyContinue\r\n        Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\cdrom' -Name 'Start' -Value 1\r\n        Start-Process -File 'C:\\Windows\\System32\\Sysprep\\Sysprep.exe' -ArgumentList '/generalize /oobe /shutdown /mode:vm'\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[resourceId('Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "imageVirtualMachineName": {
                                "value": "[[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[variables('resourceGroupName')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "13646192547375535656"
                                }
                              },
                              "parameters": {
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'generalizeVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      {
                                        "name": "VirtualMachineName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        $PowerStatus = ''\r\n        while ($PowerStatus -ne 'VM stopped') \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $PowerStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).Statuses[1].DisplayStatus\r\n        }\r\n        Set-AzVm -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Generalized\r\n        Start-Sleep -Seconds 30\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[resourceId('Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('image-version-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "computeGalleryImageResourceId": {
                                "value": "[[parameters('computeGalleryImageResourceId')]"
                              },
                              "computeGalleryName": {
                                "value": "[[parameters('computeGalleryName')]"
                              },
                              "diskEncryptionSetResourceId": {
                                "value": "[[parameters('diskEncryptionSetResourceId')]"
                              },
                              "excludeFromLatest": {
                                "value": "[[parameters('excludeFromLatest')]"
                              },
                              "imageDefinitionName": {
                                "value": "[[parameters('imageDefinitionName')]"
                              },
                              "imageVersionNumber": {
                                "value": "[[variables('autoImageVersion')]"
                              },
                              "imageVirtualMachineResourceId": {
                                "value": "[[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "marketplaceImageOffer": {
                                "value": "[[parameters('marketplaceImageOffer')]"
                              },
                              "marketplaceImagePublisher": {
                                "value": "[[parameters('marketplaceImagePublisher')]"
                              },
                              "replicaCount": {
                                "value": "[[parameters('replicaCount')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "10489448698817055639"
                                }
                              },
                              "parameters": {
                                "allowDeletionOfReplicatedLocations": {
                                  "type": "bool",
                                  "defaultValue": true
                                },
                                "computeGalleryName": {
                                  "type": "string"
                                },
                                "computeGalleryImageResourceId": {
                                  "type": "string"
                                },
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "excludeFromLatest": {
                                  "type": "bool"
                                },
                                "imageDefinitionName": {
                                  "type": "string"
                                },
                                "imageVersionNumber": {
                                  "type": "string"
                                },
                                "imageVirtualMachineResourceId": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "replicaCount": {
                                  "type": "int"
                                },
                                "tags": {
                                  "type": "object"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/galleries/images",
                                  "apiVersion": "2022-03-03",
                                  "name": "[[format('{0}/{1}', parameters('computeGalleryName'), parameters('imageDefinitionName'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                                  "properties": {
                                    "architecture": "x64",
                                    "features": [
                                      {
                                        "name": "SecurityType",
                                        "value": "TrustedLaunch"
                                      }
                                    ],
                                    "hyperVGeneration": "V2",
                                    "identifier": {
                                      "offer": "[[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImageOffer'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.offer)]",
                                      "publisher": "[[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImagePublisher'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.publisher)]",
                                      "sku": "[[parameters('imageDefinitionName')]"
                                    },
                                    "osState": "Generalized",
                                    "osType": "Windows"
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/galleries/images/versions",
                                  "apiVersion": "2022-03-03",
                                  "name": "[[format('{0}/{1}/{2}', parameters('computeGalleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                                  "properties": {
                                    "publishingProfile": {
                                      "excludeFromLatest": "[[parameters('excludeFromLatest')]",
                                      "replicaCount": "[[parameters('replicaCount')]",
                                      "replicationMode": "Full",
                                      "storageAccountType": "Standard_LRS",
                                      "targetRegions": [
                                        {
                                          "name": "[[parameters('location')]",
                                          "regionalReplicaCount": "[[parameters('replicaCount')]",
                                          "storageAccountType": "Standard_LRS"
                                        }
                                      ]
                                    },
                                    "safetyProfile": {
                                      "allowDeletionOfReplicatedLocations": "[[parameters('allowDeletionOfReplicatedLocations')]"
                                    },
                                    "storageProfile": {
                                      "source": {
                                        "id": "[[parameters('imageVirtualMachineResourceId')]"
                                      }
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                                  ]
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[resourceId('Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "enableBuildAutomation": {
                                "value": "[[parameters('enableBuildAutomation')]"
                              },
                              "imageVirtualMachineName": {
                                "value": "[[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.23.1.45101",
                                  "templateHash": "2585342901489447118"
                                }
                              },
                              "parameters": {
                                "enableBuildAutomation": {
                                  "type": "bool"
                                },
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'removeVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": "[[if(parameters('enableBuildAutomation'), false(), true())]",
                                    "parameters": [
                                      {
                                        "name": "EnableBuildAutomation",
                                        "value": "[[string(parameters('enableBuildAutomation'))]"
                                      },
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ImageVmName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      },
                                      {
                                        "name": "ManagementVmName",
                                        "value": "[[parameters('virtualMachineName')]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[resourceGroup().name]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$EnableBuildAutomation,\r\n          [string]$Environment,\r\n          [string]$ImageVmName,\r\n          [string]$ManagementVmName,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ImageVmName -Force\r\n        if($EnableBuildAutomation -eq 'false')\r\n        {\r\n          Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ManagementVmName -NoWait -Force -AsJob\r\n        }\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[resourceId('Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        }
                      ]
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/templateSpecs",
                      "apiVersion": "2022-02-01",
                      "name": "[format('ts-{0}', parameters('imageDefinitionName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/templateSpecs'), parameters('tags')['Microsoft.Resources/templateSpecs'], createObject())]",
                      "properties": {
                        "description": "[format('An automation runbook deploys a new image version for the \"{0}\" image definition from this template spec.', parameters('imageDefinitionName'))]",
                        "displayName": "[format('Zero Trust Image Build Automation: {0}', parameters('imageDefinitionName'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/templateSpecs/versions",
                      "apiVersion": "2022-02-01",
                      "name": "[format('{0}/{1}', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/templateSpecs'), parameters('tags')['Microsoft.Resources/templateSpecs'], createObject())]",
                      "properties": {
                        "mainTemplate": "[variables('$fxv#0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/templateSpecs', format('ts-{0}', parameters('imageDefinitionName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/templateSpecs/versions', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "8820205774480521076"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": true,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_D2s_v3"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true,
                            "patchSettings": {
                              "patchMode": "AutomaticByOS",
                              "assessmentMode": "ImageDefault"
                            }
                          }
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            },
                            "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
                            "osType": "Windows"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('automation-account-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcGisProInstaller": {
                    "value": "[parameters('arcGisProInstaller')]"
                  },
                  "actionGroupName": {
                    "value": "[parameters('actionGroupName')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "automationAccountPrivateDnsZoneResourceId": {
                    "value": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                  },
                  "computeGalleryResourceId": {
                    "value": "[parameters('computeGalleryResourceId')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "distributionGroup": {
                    "value": "[parameters('distributionGroup')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "imageMajorVersion": {
                    "value": "[parameters('imageMajorVersion')]"
                  },
                  "imageMinorVersion": {
                    "value": "[parameters('imageMinorVersion')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[parameters('imageVirtualMachineName')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installArcGisPro": {
                    "value": "[parameters('installArcGisPro')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDrive": {
                    "value": "[parameters('installOneDrive')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "oUPath": {
                    "value": "[parameters('oUPath')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "storageAccountName": {
                    "value": "[variables('storageAccountName')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "templateSpecResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDOTInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "11773766989873420876"
                    }
                  },
                  "parameters": {
                    "arcGisProInstaller": {
                      "type": "string"
                    },
                    "actionGroupName": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "automationAccountPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "computeGalleryResourceId": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "distributionGroup": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "excludeFromLatest": {
                      "type": "bool"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageMajorVersion": {
                      "type": "int"
                    },
                    "imageMinorVersion": {
                      "type": "int"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installArcGisPro": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDrive": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "jobScheduleName": {
                      "type": "string",
                      "defaultValue": "[newGuid()]"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "oUPath": {
                      "type": "string"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "sourceImageType": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "templateSpecResourceId": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDOTInstaller": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "parameters": {
                      "arcGisProInstaller": "[parameters('arcGisProInstaller')]",
                      "computeGalleryResourceId": "[parameters('computeGalleryResourceId')]",
                      "containerName": "[parameters('containerName')]",
                      "customizations": "[string(parameters('customizations'))]",
                      "diskEncryptionSetResourceId": "[parameters('diskEncryptionSetResourceId')]",
                      "enableBuildAutomation": "[string(parameters('enableBuildAutomation'))]",
                      "environmentName": "[environment().name]",
                      "excludeFromLatest": "[parameters('excludeFromLatest')]",
                      "imageDefinitionName": "[parameters('imageDefinitionName')]",
                      "imageMajorVersion": "[string(parameters('imageMajorVersion'))]",
                      "imageMinorVersion": "[string(parameters('imageMinorVersion'))]",
                      "imageVirtualMachineName": "[parameters('imageVirtualMachineName')]",
                      "installAccess": "[string(parameters('installAccess'))]",
                      "installArcGisPro": "[string(parameters('installArcGisPro'))]",
                      "installExcel": "[string(parameters('installExcel'))]",
                      "InstallOneDrive": "[string(parameters('installOneDrive'))]",
                      "installOneNote": "[string(parameters('installOneNote'))]",
                      "installOutlook": "[string(parameters('installOutlook'))]",
                      "installPowerPoint": "[string(parameters('installPowerPoint'))]",
                      "installProject": "[string(parameters('installProject'))]",
                      "installPublisher": "[string(parameters('installPublisher'))]",
                      "installSkypeForBusiness": "[string(parameters('installSkypeForBusiness'))]",
                      "installTeams": "[string(parameters('installTeams'))]",
                      "installVirtualDesktopOptimizationTool": "[string(parameters('installVirtualDesktopOptimizationTool'))]",
                      "installVisio": "[string(parameters('installVisio'))]",
                      "installWord": "[string(parameters('installWord'))]",
                      "keyVaultName": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "managementVirtualMachineName": "[parameters('managementVirtualMachineName')]",
                      "marketplaceImageOffer": "[parameters('marketplaceImageOffer')]",
                      "marketplaceImagePublisher": "[parameters('marketplaceImagePublisher')]",
                      "marketplaceImageSKU": "[parameters('marketplaceImageSKU')]",
                      "msrdcwebrtcsvcInstaller": "[parameters('msrdcwebrtcsvcInstaller')]",
                      "officeInstaller": "[parameters('officeInstaller')]",
                      "replicaCount": "[string(parameters('replicaCount'))]",
                      "resourceGroupName": "[parameters('resourceGroupName')]",
                      "computeGalleryImageResourceId": "[parameters('computeGalleryImageResourceId')]",
                      "sourceImageType": "[parameters('sourceImageType')]",
                      "storageAccountName": "[parameters('storageAccountName')]",
                      "subnetResourceId": "[parameters('subnetResourceId')]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "tags": "[string(parameters('tags'))]",
                      "teamsInstaller": "[parameters('teamsInstaller')]",
                      "templateSpecResourceId": "[parameters('templateSpecResourceId')]",
                      "tenantId": "[variables('tenantId')]",
                      "userAssignedIdentityClientId": "[parameters('userAssignedIdentityClientId')]",
                      "userAssignedIdentityPrincipalId": "[parameters('userAssignedIdentityPrincipalId')]",
                      "userAssignedIdentityResourceId": "[parameters('userAssignedIdentityResourceId')]",
                      "vcRedistInstaller": "[parameters('vcRedistInstaller')]",
                      "vDOTInstaller": "[parameters('vDOTInstaller')]",
                      "virtualMachineSize": "[parameters('virtualMachineSize')]"
                    },
                    "privateEndpointName": "[format('pe-{0}', parameters('automationAccountName'))]",
                    "runbookName": "New-AzureZeroTrustImageBuild",
                    "storageEndpoint": "[environment().suffixes.storage]",
                    "subscriptionId": "[subscription().subscriptionId]",
                    "tenantId": "[subscription().tenantId]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2022-08-08",
                      "name": "[parameters('automationAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject())]",
                      "properties": {
                        "disableLocalAuth": false,
                        "publicNetworkAccess": false,
                        "sku": {
                          "name": "Basic"
                        },
                        "encryption": {
                          "keySource": "Microsoft.Automation",
                          "identity": {}
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateEndpointName')]",
                            "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                              "groupIds": [
                                "DSCAndHybridWorker"
                              ]
                            }
                          }
                        ],
                        "customNetworkInterfaceName": "[format('nic-{0}', parameters('automationAccountName'))]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "privatelink-azure-automation-net",
                            "properties": {
                              "privateDnsZoneId": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'runbook')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "AutomationAccountName",
                            "value": "[parameters('automationAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "RunbookName",
                            "value": "[variables('runbookName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[variables('storageEndpoint')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param (\r\n          [string]$AutomationAccountName,\r\n          [string]$ContainerName,\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$RunbookName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $BlobName = 'New-AzureZeroTrustImageBuild.ps1'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $File = \"$env:windir\\temp\\$BlobName\"\r\n        do\r\n        {\r\n            try\r\n            {\r\n                Write-Output \"Download Attempt $i\"\r\n                Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $File\r\n            }\r\n            catch [System.Net.WebException]\r\n            {\r\n                Start-Sleep -Seconds 60\r\n                $i++\r\n                if($i -gt 10){throw}\r\n                continue\r\n            }\r\n            catch\r\n            {\r\n                $Output = $_ | select *\r\n                Write-Output $Output\r\n                throw\r\n            }\r\n        }\r\n        until(Test-Path -Path $File)\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Import-AzAutomationRunbook -Name $RunbookName -Path $File -Type PowerShell -AutomationAccountName $AutomationAccountName -ResourceGroupName $ResourceGroupName -Published -Force | Out-Null\r\n      "
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/schedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('imageDefinitionName'))]",
                      "properties": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "[dateTimeAdd(parameters('time'), 'P1D')]",
                        "timeZone": "[parameters('timeZone')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('jobScheduleName'))]",
                      "properties": {
                        "parameters": {
                          "parameters": "[replace(string(variables('parameters')), '\"', '\\\"')]"
                        },
                        "runbook": {
                          "name": "[variables('runbookName')]"
                        },
                        "runOn": "Zero Trust Image Build Automation",
                        "schedule": {
                          "name": "[parameters('imageDefinitionName')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]",
                        "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), parameters('imageDefinitionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Zero Trust Image Build Automation', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')))]",
                      "properties": {
                        "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('managementVirtualMachineName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'HybridWorkerForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Automation.HybridWorker",
                        "type": "HybridWorkerForWindows",
                        "typeHandlerVersion": "1.1",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08').automationHybridServiceUrl]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                      ]
                    },
                    {
                      "condition": "[and(and(not(empty(parameters('domainJoinUserPrincipalName'))), not(empty(parameters('domainName')))), not(empty(parameters('oUPath'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "forceUpdateTag": "[parameters('time')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "User": "[parameters('domainJoinUserPrincipalName')]",
                          "Restart": "true",
                          "Options": "3",
                          "OUPath": "[parameters('oUPath')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('managementVirtualMachineName'), 'HybridWorkerForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                      ]
                    },
                    {
                      "condition": "[and(and(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), not(empty(parameters('distributionGroup')))), not(empty(parameters('actionGroupName'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('monitoring-{0}', parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "actionGroupName": {
                            "value": "[parameters('actionGroupName')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "distributionGroup": {
                            "value": "[parameters('distributionGroup')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.23.1.45101",
                              "templateHash": "1301495534470230952"
                            }
                          },
                          "parameters": {
                            "actionGroupName": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "distributionGroup": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "alerts": [
                              {
                                "name": "[format('Zero Trust Image Build - Failure ({0})', parameters('automationAccountName'))]",
                                "description": "Sends an error alert when the runbook build fails.",
                                "severity": 0,
                                "evaluationFrequency": "PT5M",
                                "windowSize": "PT5M",
                                "criteria": {
                                  "allOf": [
                                    {
                                      "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image build failed\"",
                                      "timeAggregation": "Count",
                                      "dimensions": [
                                        {
                                          "name": "ResultDescription",
                                          "operator": "Include",
                                          "values": [
                                            "*"
                                          ]
                                        }
                                      ],
                                      "operator": "GreaterThanOrEqual",
                                      "threshold": 1,
                                      "failingPeriods": {
                                        "numberOfEvaluationPeriods": 1,
                                        "minFailingPeriodsToAlert": 1
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "name": "[format('Zero Trust Image Build - Success ({0})', parameters('automationAccountName'))]",
                                "description": "Sends an informational alert when the runbook build succeeds.",
                                "severity": 3,
                                "evaluationFrequency": "PT5M",
                                "windowSize": "PT5M",
                                "criteria": {
                                  "allOf": [
                                    {
                                      "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image build succeeded\"",
                                      "timeAggregation": "Count",
                                      "dimensions": [
                                        {
                                          "name": "ResultDescription",
                                          "operator": "Include",
                                          "values": [
                                            "*"
                                          ]
                                        }
                                      ],
                                      "operator": "GreaterThanOrEqual",
                                      "threshold": 1,
                                      "failingPeriods": {
                                        "numberOfEvaluationPeriods": 1,
                                        "minFailingPeriodsToAlert": 1
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                              "name": "[format('diag-{0}', parameters('automationAccountName'))]",
                              "properties": {
                                "logs": [
                                  {
                                    "category": "JobLogs",
                                    "enabled": true
                                  },
                                  {
                                    "category": "JobStreams",
                                    "enabled": true
                                  }
                                ],
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            },
                            {
                              "condition": "[and(not(empty(parameters('actionGroupName'))), not(empty(parameters('distributionGroup'))))]",
                              "type": "Microsoft.Insights/actionGroups",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('actionGroupName')]",
                              "location": "global",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Insights/actionGroups'), parameters('tags')['Microsoft.Insights/actionGroups'], createObject())]",
                              "properties": {
                                "emailReceivers": [
                                  {
                                    "emailAddress": "[parameters('distributionGroup')]",
                                    "name": "[parameters('distributionGroup')]",
                                    "useCommonAlertSchema": true
                                  }
                                ],
                                "enabled": true,
                                "groupShortName": "Image Builds"
                              }
                            },
                            {
                              "copy": {
                                "name": "scheduledQueryRules",
                                "count": "[length(range(0, length(variables('alerts'))))]"
                              },
                              "condition": "[and(not(empty(parameters('actionGroupName'))), not(empty(parameters('logAnalyticsWorkspaceResourceId'))))]",
                              "type": "Microsoft.Insights/scheduledQueryRules",
                              "apiVersion": "2022-06-15",
                              "name": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].name]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tags')['Microsoft.Insights/scheduledQueryRules'], createObject())]",
                              "kind": "LogAlert",
                              "properties": {
                                "actions": {
                                  "actionGroups": [
                                    "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
                                  ]
                                },
                                "autoMitigate": false,
                                "skipQueryValidation": false,
                                "criteria": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].criteria]",
                                "description": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].description]",
                                "displayName": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].name]",
                                "enabled": true,
                                "evaluationFrequency": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].evaluationFrequency]",
                                "severity": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].severity]",
                                "windowSize": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].windowSize]",
                                "scopes": [
                                  "[parameters('logAnalyticsWorkspaceResourceId')]"
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('image-build-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[if(parameters('existingResourceGroup'), parameters('resourceGroupName'), parameters('resourceGroupName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "arcGisProInstaller": {
            "value": "[parameters('arcGisProInstaller')]"
          },
          "computeGalleryImageResourceId": {
            "value": "[parameters('computeGalleryImageResourceId')]"
          },
          "computeGalleryName": {
            "value": "[parameters('computeGalleryName')]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[parameters('diskEncryptionSetResourceId')]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('excludeFromLatest')]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "imageMajorVersion": {
            "value": "[parameters('imageMajorVersion')]"
          },
          "imageMinorVersion": {
            "value": "[parameters('imageMinorVersion')]"
          },
          "imageVirtualMachineName": {
            "value": "[variables('imageVirtualMachineName')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installArcGisPro": {
            "value": "[parameters('installArcGisPro')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDrive": {
            "value": "[parameters('installOneDrive')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installPublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managementVirtualMachineName": {
            "value": "[variables('managementVirtualMachineName')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "marketplaceImageSKU": {
            "value": "[parameters('marketplaceImageSKU')]"
          },
          "msrdcwebrtcsvcInstaller": {
            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
          },
          "officeInstaller": {
            "value": "[parameters('officeInstaller')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "sourceImageType": {
            "value": "[parameters('sourceImageType')]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "subnetResourceId": {
            "value": "[parameters('subnetResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "teamsInstaller": {
            "value": "[parameters('teamsInstaller')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "vcRedistInstaller": {
            "value": "[parameters('vcRedistInstaller')]"
          },
          "vDOTInstaller": {
            "value": "[parameters('vDOTInstaller')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "12335721332191006129"
            }
          },
          "parameters": {
            "arcGisProInstaller": {
              "type": "string"
            },
            "computeGalleryName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "customizations": {
              "type": "array",
              "defaultValue": []
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow('yyMMddHHs')]"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool"
            },
            "excludeFromLatest": {
              "type": "bool"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "imageMajorVersion": {
              "type": "int"
            },
            "imageMinorVersion": {
              "type": "int"
            },
            "imageVirtualMachineName": {
              "type": "string"
            },
            "installAccess": {
              "type": "bool"
            },
            "installArcGisPro": {
              "type": "bool"
            },
            "installExcel": {
              "type": "bool"
            },
            "installOneDrive": {
              "type": "bool"
            },
            "installOneNote": {
              "type": "bool"
            },
            "installOutlook": {
              "type": "bool"
            },
            "installPowerPoint": {
              "type": "bool"
            },
            "installProject": {
              "type": "bool"
            },
            "installPublisher": {
              "type": "bool"
            },
            "installSkypeForBusiness": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "installVisio": {
              "type": "bool"
            },
            "installWord": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "localAdministratorPassword": {
              "type": "securestring",
              "defaultValue": ""
            },
            "localAdministratorUsername": {
              "type": "securestring",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string",
              "defaultValue": ""
            },
            "marketplaceImagePublisher": {
              "type": "string",
              "defaultValue": ""
            },
            "marketplaceImageSKU": {
              "type": "string",
              "defaultValue": ""
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "officeInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "replicaCount": {
              "type": "int"
            },
            "runbookExecution": {
              "type": "bool",
              "defaultValue": false
            },
            "computeGalleryImageResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "sourceImageType": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "teamsInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "vcRedistInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "vDOTInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "variables": {
            "autoImageVersion": "[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imageMinorVersion'))]",
            "imageSuffix": "[take(parameters('deploymentNameSuffix'), 9)]",
            "resourceGroupName": "[resourceGroup().name]",
            "storageAccountName": "[split(parameters('storageAccountResourceId'), '/')[8]]",
            "storageEndpoint": "[environment().suffixes.storage]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "condition": "[not(parameters('enableBuildAutomation'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageAccountName": {
                    "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "8820205774480521076"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": true,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_D2s_v3"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true,
                            "patchSettings": {
                              "patchMode": "AutomaticByOS",
                              "assessmentMode": "ImageDefault"
                            }
                          }
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            },
                            "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
                            "osType": "Windows"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "localAdministratorPassword": "[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                  "localAdministratorUsername": "[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('imageVirtualMachineName')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "12018655233659210692"
                    }
                  },
                  "parameters": {
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "sourceImageType": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "imageReference": "[if(equals(parameters('sourceImageType'), 'AzureComputeGallery'), createObject('id', parameters('computeGalleryImageResourceId')), createObject('publisher', parameters('marketplaceImagePublisher'), 'offer', parameters('marketplaceImageOffer'), 'sku', parameters('marketplaceImageSKU'), 'version', 'latest'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2022-05-01",
                      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('imageReference')]",
                          "osDisk": {
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "storageAccountType": "StandardSSD_LRS"
                            },
                            "name": "[format('disk-{0}', parameters('virtualMachineName'))]"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('customizations-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcGisProInstaller": {
                    "value": "[parameters('arcGisProInstaller')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installArcGisPro": {
                    "value": "[parameters('installArcGisPro')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDrive": {
                    "value": "[parameters('installOneDrive')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "storageAccountName": {
                    "value": "[variables('storageAccountName')]"
                  },
                  "storageEndpoint": {
                    "value": "[variables('storageEndpoint')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "userAssignedIdentityObjectId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDotInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "3091204516823702660"
                    }
                  },
                  "parameters": {
                    "arcGisProInstaller": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installArcGisPro": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDrive": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageEndpoint": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "userAssignedIdentityObjectId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDotInstaller": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "installAccessVar": "[format('{0}installAccess', parameters('installAccess'))]",
                    "installers": "[parameters('customizations')]",
                    "installExcelVar": "[format('{0}installWord', parameters('installExcel'))]",
                    "installOneDriveVar": "[format('{0}installOneDrive', parameters('installOneDrive'))]",
                    "installOneNoteVar": "[format('{0}installOneNote', parameters('installOneNote'))]",
                    "installOutlookVar": "[format('{0}installOutlook', parameters('installOutlook'))]",
                    "installPowerPointVar": "[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                    "installProjectVar": "[format('{0}installProject', parameters('installProject'))]",
                    "installPublisherVar": "[format('{0}installPublisher', parameters('installPublisher'))]",
                    "installSkypeForBusinessVar": "[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                    "installVisioVar": "[format('{0}installVisio', parameters('installVisio'))]",
                    "installWordVar": "[format('{0}installWord', parameters('installWord'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "applications",
                        "count": "[length(variables('installers'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "Blobname",
                            "value": "[variables('installers')[copyIndex()].blobName]"
                          },
                          {
                            "name": "Installer",
                            "value": "[variables('installers')[copyIndex()].name]"
                          },
                          {
                            "name": "Arguments",
                            "value": "[variables('installers')[copyIndex()].arguments]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $env:windir\\temp\\$Installer\\Files\\$Blobname\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse\r\n        }\r\n      "
                        }
                      }
                    },
                    {
                      "condition": "[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDrive')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'office')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "InstallAccess",
                            "value": "[variables('installAccessVar')]"
                          },
                          {
                            "name": "InstallWord",
                            "value": "[variables('installWordVar')]"
                          },
                          {
                            "name": "InstallExcel",
                            "value": "[variables('installExcelVar')]"
                          },
                          {
                            "name": "InstallOneDrive",
                            "value": "[variables('installOneDriveVar')]"
                          },
                          {
                            "name": "InstallOneNote",
                            "value": "[variables('installOneNoteVar')]"
                          },
                          {
                            "name": "InstallOutlook",
                            "value": "[variables('installOutlookVar')]"
                          },
                          {
                            "name": "InstallPowerPoint",
                            "value": "[variables('installPowerPointVar')]"
                          },
                          {
                            "name": "InstallProject",
                            "value": "[variables('installProjectVar')]"
                          },
                          {
                            "name": "InstallPublisher",
                            "value": "[variables('installPublisherVar')]"
                          },
                          {
                            "name": "InstallSkypeForBusiness",
                            "value": "[variables('installSkypeForBusinessVar')]"
                          },
                          {
                            "name": "InstallVisio",
                            "value": "[variables('installVisioVar')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('officeInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$InstallAccess,\r\n        [string]$InstallExcel,\r\n        [string]$InstallOneDrive,\r\n        [string]$InstallOutlook,\r\n        [string]$InstallProject,\r\n        [string]$InstallPublisher,\r\n        [string]$InstallSkypeForBusiness,\r\n        [string]$InstallVisio,\r\n        [string]$InstallWord,\r\n        [string]$InstallOneNote,\r\n        [string]$InstallPowerPoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDrive -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"OneDrive\" />'\r\n      }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          Add-Content \"$env:windir\\temp\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office365x64.xml\" '</Configuration>'\r\n      $Installer = \"$env:windir\\temp\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications"
                      ]
                    },
                    {
                      "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'vdot')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('vDotInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n      "
                        },
                        "timeoutInSeconds": 640
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]"
                      ]
                    },
                    {
                      "condition": "[parameters('installTeams')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'teams')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('teamsInstaller')]"
                          },
                          {
                            "name": "BlobName2",
                            "value": "[parameters('vcRedistInstaller')]"
                          },
                          {
                            "name": "BlobName3",
                            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      $ErrorActionPreference = \"Stop\"\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                      ]
                    },
                    {
                      "condition": "[parameters('installArcGisPro')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'arcGisPro')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('arcGisProInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      # Retrieve Files\r\n      New-Item -Path $env:windir\\temp -Name arcgis -ItemType \"directory\" -Force\r\n      $ZIP = \"$env:windir\\temp\\arcgispro.zip\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n      Start-Sleep -Seconds 30\r\n      Set-Location -Path $env:windir\\temp\r\n      Unblock-File -Path $ZIP\r\n      Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\\arcgis\" -Force\r\n\r\n      # Install Arcgis\r\n      $arcGisProMsi = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -eq \"ArcGisPro.msi\"})\r\n      $arcGisProMsp = (Get-ChildItem \"$env:windir\\temp\\arcgis\" -Recurse | where {$_.Extension -eq \".msp\"})\r\n      $winDesktopRuntime = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -like \"windowsdesktop-runtime-*\"})\r\n\r\n      # If found Install Windows Desktop Runtime Pre-Req\r\n      try {\r\n        if ($winDesktopRuntime ){\r\n            Start-Process -FilePath \"$($winDesktopRuntime.Directory.FullName)\\$winDesktopRuntime\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru\r\n        }\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n        # Install ArcGis Pro\r\n        $arcGisProArguments = \"/i $($arcGisProMsi.Directory.FullName)\\$arcGisProMsi ALLUSERS=1 ACCEPTEULA=yes ENABLEEUEI=0 SOFTWARE_CLASS=Professional AUTHORIZATION_TYPE=NAMED_USER LOCK_AUTH_SETTINGS=False ArcGIS_Connection=TRUE /qn /norestart\"\r\n        Start-Process \"msiexec.exe\" -ArgumentList $arcGisProArguments  -Wait -NoNewWindow -PassThru\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n      # If MSP is found, patch ArcGisPro with MSP file\r\n      if($arcGisProMsp){\r\n          Start-Process \"msiexec.exe\" -ArgumentList \"/p $($arcGisProMsp.Directory.FullName)\\$arcGisProMsp /qn\" -Wait -NoNewWindow -PassThru\r\n      }\r\n    }\r\n    catch {\r\n      Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n    }\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('restart-vm-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageVirtualMachineName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "17226869118757649079"
                    }
                  },
                  "parameters": {
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[parameters('resourceGroupName')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('customizations-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "18065835533900027286"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'sysprepVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": false,
                        "asyncExecution": true,
                        "parameters": [],
                        "source": {
                          "script": "        Start-Sleep -Seconds 30\r\n        Remove-Item -LiteralPath 'C:\\Windows\\Panther' -Force -Recurse -ErrorAction SilentlyContinue\r\n        Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\cdrom' -Name 'Start' -Value 1\r\n        Start-Process -File 'C:\\Windows\\System32\\Sysprep\\Sysprep.exe' -ArgumentList '/generalize /oobe /shutdown /mode:vm'\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('restart-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageVirtualMachineName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "13646192547375535656"
                    }
                  },
                  "parameters": {
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'generalizeVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[parameters('resourceGroupName')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        $PowerStatus = ''\r\n        while ($PowerStatus -ne 'VM stopped') \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $PowerStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).Statuses[1].DisplayStatus\r\n        }\r\n        Set-AzVm -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Generalized\r\n        Start-Sleep -Seconds 30\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('image-version-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "computeGalleryName": {
                    "value": "[parameters('computeGalleryName')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "imageVersionNumber": {
                    "value": "[variables('autoImageVersion')]"
                  },
                  "imageVirtualMachineResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "10489448698817055639"
                    }
                  },
                  "parameters": {
                    "allowDeletionOfReplicatedLocations": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "computeGalleryName": {
                      "type": "string"
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "excludeFromLatest": {
                      "type": "bool"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageVersionNumber": {
                      "type": "string"
                    },
                    "imageVirtualMachineResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/galleries/images",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}', parameters('computeGalleryName'), parameters('imageDefinitionName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                      "properties": {
                        "architecture": "x64",
                        "features": [
                          {
                            "name": "SecurityType",
                            "value": "TrustedLaunch"
                          }
                        ],
                        "hyperVGeneration": "V2",
                        "identifier": {
                          "offer": "[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImageOffer'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.offer)]",
                          "publisher": "[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImagePublisher'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.publisher)]",
                          "sku": "[parameters('imageDefinitionName')]"
                        },
                        "osState": "Generalized",
                        "osType": "Windows"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/galleries/images/versions",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}/{2}', parameters('computeGalleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                      "properties": {
                        "publishingProfile": {
                          "excludeFromLatest": "[parameters('excludeFromLatest')]",
                          "replicaCount": "[parameters('replicaCount')]",
                          "replicationMode": "Full",
                          "storageAccountType": "Standard_LRS",
                          "targetRegions": [
                            {
                              "name": "[parameters('location')]",
                              "regionalReplicaCount": "[parameters('replicaCount')]",
                              "storageAccountType": "Standard_LRS"
                            }
                          ]
                        },
                        "safetyProfile": {
                          "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                        },
                        "storageProfile": {
                          "source": {
                            "id": "[parameters('imageVirtualMachineResourceId')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "2585342901489447118"
                    }
                  },
                  "parameters": {
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'removeVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": "[if(parameters('enableBuildAutomation'), false(), true())]",
                        "parameters": [
                          {
                            "name": "EnableBuildAutomation",
                            "value": "[string(parameters('enableBuildAutomation'))]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ImageVmName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          {
                            "name": "ManagementVmName",
                            "value": "[parameters('virtualMachineName')]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$EnableBuildAutomation,\r\n          [string]$Environment,\r\n          [string]$ImageVmName,\r\n          [string]$ManagementVmName,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ImageVmName -Force\r\n        if($EnableBuildAutomation -eq 'false')\r\n        {\r\n          Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ManagementVmName -NoWait -Force -AsJob\r\n        }\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('build-automation-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ]
}